{
    "docs": [
        {
            "location": "/", 
            "text": "The ARCH Package\n\n\nARCH (Autoregressive Conditional Heteroskedasticity) models are a class of models designed to capture a feature of financial returns data known as \nvolatility clustering\n, \ni.e.\n, the fact that large (in absolute value) returns tend to cluster together, such as during periods of financial turmoil, which then alternate with relatively calmer periods.\n\n\nThe basic ARCH model was introduced by Engle (1982, Econometrica, pp. 987\u20131008), who in 2003 was awarded a Nobel Memorial Prize in Economic Sciences for its development. Today, the most popular variant is the generalized ARCH, or GARCH, model and its various extensions, due to Bollerslev (1986, Journal of Econometrics, pp. 307 - 327). The basic GARCH(1,1) model for a sample of daily asset returns $\\{r_t\\}_{t\\in{1,\\ldots,T}}$ is\n\n\n\n\n\nr_t=\\sigma_tz_t,\\quad z_t\\sim\\mathrm{N}(0,1),\\quad\n\\sigma_t^2=\\omega+\\alpha r_{t-1}^2+\\beta \\sigma_{t-1}^2,\\quad \\omega, \\alpha, \\beta>0,\\quad \\alpha+\\beta<1.\n\n\n\n\n\nThis can be extended by including additional lags of past squared returns and volatilities: the GARCH(p, q) model  has $q$ of the former and $p$ of the latter. Another generalization is to allow  $z_t$ to follow other, non-Gaussian distributions.\n\n\nThis package implements simulation, estimation, and model selection for the following models:\n\n\n\n\nGARCH(p, q)\n\n\nEGARCH(o, p q)\n\n\n\n\nAs for error distributions, the user may choose among the following:\n\n\n\n\nStandard Normal\n\n\nStandardized Student's $t$\n\n\n\n\n\n\nInstallation\n\n\nThe package is not yet registered. To install it in Julia 1.0 or later, do\n\n\nadd https://github.com/s-broda/ARCH.jl\n\n\n\n\nin the Pkg REPL mode (which is entered by pressing \n]\n at the prompt). For Julia 0.6, check out the 0.6 branch.\n\n\n\n\nContents\n\n\n\n\nVolatility specifications\n\n\nGARCH\n\n\nEGARCH\n\n\n\n\n\n\nMean specifications\n\n\nDistributions\n\n\nWorking with an [\nARCHModel\n](reference.md#ARCH.ARCHModel)\n\n\nModel selection\n\n\nIndex\n\n\nPublic API\n\n\n\n\n\n\nAcknowledgements\n\n\nThis project has received funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation program (grant agreement No. 750559).", 
            "title": "Home"
        }, 
        {
            "location": "/#the-arch-package", 
            "text": "ARCH (Autoregressive Conditional Heteroskedasticity) models are a class of models designed to capture a feature of financial returns data known as  volatility clustering ,  i.e. , the fact that large (in absolute value) returns tend to cluster together, such as during periods of financial turmoil, which then alternate with relatively calmer periods.  The basic ARCH model was introduced by Engle (1982, Econometrica, pp. 987\u20131008), who in 2003 was awarded a Nobel Memorial Prize in Economic Sciences for its development. Today, the most popular variant is the generalized ARCH, or GARCH, model and its various extensions, due to Bollerslev (1986, Journal of Econometrics, pp. 307 - 327). The basic GARCH(1,1) model for a sample of daily asset returns $\\{r_t\\}_{t\\in{1,\\ldots,T}}$ is   \nr_t=\\sigma_tz_t,\\quad z_t\\sim\\mathrm{N}(0,1),\\quad\n\\sigma_t^2=\\omega+\\alpha r_{t-1}^2+\\beta \\sigma_{t-1}^2,\\quad \\omega, \\alpha, \\beta>0,\\quad \\alpha+\\beta<1.   This can be extended by including additional lags of past squared returns and volatilities: the GARCH(p, q) model  has $q$ of the former and $p$ of the latter. Another generalization is to allow  $z_t$ to follow other, non-Gaussian distributions.  This package implements simulation, estimation, and model selection for the following models:   GARCH(p, q)  EGARCH(o, p q)   As for error distributions, the user may choose among the following:   Standard Normal  Standardized Student's $t$", 
            "title": "The ARCH Package"
        }, 
        {
            "location": "/#installation", 
            "text": "The package is not yet registered. To install it in Julia 1.0 or later, do  add https://github.com/s-broda/ARCH.jl  in the Pkg REPL mode (which is entered by pressing  ]  at the prompt). For Julia 0.6, check out the 0.6 branch.", 
            "title": "Installation"
        }, 
        {
            "location": "/#contents", 
            "text": "Volatility specifications  GARCH  EGARCH    Mean specifications  Distributions  Working with an [ ARCHModel ](reference.md#ARCH.ARCHModel)  Model selection  Index  Public API", 
            "title": "Contents"
        }, 
        {
            "location": "/#acknowledgements", 
            "text": "This project has received funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation program (grant agreement No. 750559).", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/quickstart/", 
            "text": "Simulate a GARCH{1, 1} model\n\n\njulia\n using ARCH\n\njulia\n am = simulate(GARCH{1, 1}([1., .9, .05]), 10^4)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05\n\n\n\n\nam\n is of type \nARCHModel\n:\n\n\njulia\n typeof(am)\nARCHModel{Float64,GARCH{1,1,Float64},StdNormal{Float64},NoIntercept{Float64}}\n\n\n\n\nNote that by default, the simulated model does not contain an intercept. \nARCHModel\n implements the interface of StatisticalModel from \nStatsBase\n:\n\n\njulia\n nobs(am)\n10000\n\n\n\n\nFit a GARCH{1, 1} model to the simulated data\n\n\njulia\n fit(GARCH{1, 1}, am.data)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr(\n|z|)\n\u03bc    0.0277078 0.0435526 0.636191   0.5247\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr(\n|z|)\n\u03c9     0.910479   0.146171 6.22886    \n1e-9\n\u03b2\u2081    0.905417  0.0103798  87.229   \n1e-99\n\u03b1\u2081   0.0503472 0.00523329 9.62057   \n1e-21\n\n\n\n\nNote that an intercept is included by default. If no intercept is desired, then the keyword argument \nmeanspec=NoIntercept\n should be passed. Alternatively, use \nfit!\n to modify \nam\n (which does not include an intercept) in-place:\n\n\njulia\n fit!(am)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr(\n|z|)\n\u03c9     0.908648   0.145787 6.23269    \n1e-9\n\u03b2\u2081    0.905532  0.0103563 87.4379   \n1e-99\n\u03b1\u2081   0.0503246 0.00522825 9.62552   \n1e-21\n\n\n\n\nSimulate and fit an EGARCH model with an intercept, assuming Student's t errors\n\n\njulia\n am = simulate(EGARCH{1, 1, 1}([.1, 0., .9, .1]), 10^4; meanspec=Intercept(1.), dist=StdTDist(3.))\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\n               \u03c9  \u03b3\u2081  \u03b2\u2081  \u03b1\u2081   \u03bd   \u03bc\nParameters:  0.1 0.0 0.9 0.1 3.0 1.0\n\n\n\njulia\n fit!(am)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nMean equation parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bc     1.00043 0.0105728 94.6221   \n1e-99\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr(\n|z|)\n\u03c9     0.0987938 0.0250802  3.93912    \n1e-4\n\u03b3\u2081   0.00367806 0.0107783 0.341247   0.7329\n\u03b2\u2081      0.90718 0.0248733   36.472   \n1e-99\n\u03b1\u2081     0.105632 0.0181307  5.82614    \n1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     2.93074 0.0962429 30.4515   \n1e-99\n\n\n\n\nModel selection\n\n\nThe function \nselectmodel\n can be used to determine the optimal lag length within a class of models:\n\n\njulia\n selectmodel(EGARCH, am.data; meanspec=Intercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nMean equation parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bc     1.00043 0.0105728 94.6221   \n1e-99\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr(\n|z|)\n\u03c9     0.0987938 0.0250802  3.93912    \n1e-4\n\u03b3\u2081   0.00367806 0.0107783 0.341247   0.7329\n\u03b2\u2081      0.90718 0.0248733   36.472   \n1e-99\n\u03b1\u2081     0.105632 0.0181307  5.82614    \n1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     2.93074 0.0962429 30.4515   \n1e-99\n\n\n\n\nBy default, \nselectmodel\n minimizes the \nBIC\n. In this case, the optimal lag length corresponds to the \"truth\"; viz., the one used to simulate the model.", 
            "title": "Quick Start Guide"
        }, 
        {
            "location": "/types/", 
            "text": "Consider a sample of daily asset returns $\\{r_t\\}_{t\\in{1,\\ldots,T}}$. All models covered in this package share the same basic structure, in that they decompose the return into a conditional mean and a mean-zero innovation:\n\n\n\n\n\nr_t=\\mu_t+\\sigma_tz_t,\\quad \\mu_t\\equiv\\mathbb{E}[r_t\\mid\\mathcal{F}_{t-1}],\\quad \\sigma_t^2\\equiv\\mathbb{E}[(r_t-\\mu_t)^2\\mid\\mathcal{F}_{t-1}],\n\n\n\n\n\nwhere $z_t$ is identically and independently distributed according to some law with mean zero and unit variance and $\\{\\mathcal{F}_t\\}$ is the natural filtration of $\\{r_t\\}$ (i.e., it encodes information about past returns).\n\n\nThis package represents a (G)ARCH model as an instance of \nARCHModel\n, which implements the interface of \nStatisticalModel\n from \nStatsBase\n. An instance of this type contains a vector of data (such as equity returns), and encapsulates information about the \nvolatility specification\n (e.g., \nGARCH\n or \nEGARCH\n), the \nmean specification\n (e.g., whether an intercept is included), and the \nerror distribution\n.\n\n\n\n\nVolatility specifications\n\n\nVolatility specifications describe the evolution of $\\sigma_t$. They are modelled as subtypes of \nVolatilitySpec\n. There is one type for each class of (G)ARCH model, parameterized by numbers of lags.\n\n\n\n\nGARCH\n\n\nThe GARCH(p, q) model, due to \nBollerslev (J. Econometrics 1986)\n specifies the volatility as\n\n\n\n\n\n\\sigma_t^2=\\omega+\\sum_{i=1}^p\\beta_i \\sigma_{t-i}^2+\\sum_{i=1}^q\\alpha_i r_{t-i}^2, \\quad \\omega, \\alpha_i, \\beta_i>0,\\quad \\sum_{i=1}^{\\max p,q} \\alpha_i+\\beta_i<1.\n\n\n\n\n\nThe corresponding type is \nGARCH{p, q}\n. For example, a GARCH(1, 1) model with $\u03c9=1$, $\u03b2=.9$, and $\u03b1=.05$ is obtained with\n\n\njulia\n using ARCH\n\njulia\n GARCH{1, 1}([1., .9, .05])\nGARCH{1,1} specification.\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05\n\n\n\n\nAs for all subtypes of \nVolatilitySpec\n, the order of the parameters in the coefficient vector is such that all parameters pertaining to the first type parameter \np\n (corresponding to the first sum in the equation) appear before those pertaining to the second, \nq\n.\n\n\nAs a special case, the ARCH(q) volatility specification, due to \nEngle (Econometrica 1982)\n, is\n\n\n\n\n\n\\sigma_t^2=\\omega+\\sum_{i=1}^q\\alpha_i r_{t-i}^2,\n\n\n\n\n\ncorresponding to a GARCH{0, q} model. It is available as \n_ARCH{q}\n:\n\n\njulia\n _ARCH{2}([1., .5, .4])\nGARCH{0,2} specification.\n\n               \u03c9  \u03b1\u2081  \u03b1\u2082\nParameters:  1.0 0.5 0.4\n\n\n\n\n\n\nEGARCH\n\n\nThe EGARCH{o, p, q} volatility specification, due to \nNelson (Econometrica 1991)\n, is\n\n\n\n\n\n\\log(\\sigma_t^2)=\\omega+\\sum_{i=1}^o\\gamma_i z_{t-i}+\\sum_{i=1}^p\\beta_i \\log(\\sigma_{t-i}^2)+\\sum_{i=1}^q\\alpha_i (|z_{t-i}|-\\sqrt{2/\\pi}), \\quad z_t=r_t/\\sigma_t,\\quad \\sum_{i=1}^{p}\\beta_i<1.\n\n\n\n\n\nThe corresponding type is \nEGARCH{o, p, q}\n:\n\n\njulia\n EGARCH{1, 1, 1}([-0.1, .1, .9, .04])\nEGARCH{1,1,1} specification.\n\n                \u03c9  \u03b3\u2081  \u03b2\u2081   \u03b1\u2081\nParameters:  -0.1 0.1 0.9 0.04\n\n\n\n\n\n\nMean specifications\n\n\nMean specifications serve to specify $\\mu_t$. They are modelled as subtypes of \nMeanSpec\n. They contain their parameters as (possibly empty) vectors, but convenience constructors are provided where appropriate. Currently, two specifications are available:\n\n\n\n\n$\\mu_t=0$, available as \nNoIntercept\n:\n\n\n\n\njulia\n NoIntercept() # convenience constructor, eltype defaults to Float64\nNoIntercept{Float64}(Float64[])\n\n\n\n\n\n\n$\\mu_t=\\mu$, available as \nIntercept\n:\n\n\n\n\njulia\n Intercept(3) # convenience constructor\nIntercept{Float64}([3.0])\n\n\n\n\n\n\nDistributions\n\n\nDifferent distributions of $z_t$ are available as subtypes of \nStandardizedDistribution\n. \nStandardizedDistribution\n in turn subtypes \nDistribution{Univariate, Continuous}\n from \nDistributions.jl\n, though not the entire interface must necessarily be implemented. \nStandardizedDistribution\ns again hold their parameters as vectors, but convenience constructors are provided. The following are currently available:\n\n\n\n\nStdNormal\n, the standard normal distribution:\n\n\n\n\njulia\n StdNormal() # convenience constructor\nStdNormal{Float64}(coefs=Float64[])\n\n\n\n\n\n\nStdTDist\n, the standardized Student's \nt\n distribution:\n\n\n\n\njulia\n StdTDist(3) # convenience constructor: 3 degrees of freedom\nStdTDist{Float64}(coefs=[3.0])\n\n\n\n\n\n\nWorking with an \nARCHModel\n\n\nThe constructor for \nARCHModel\n takes two mandatory arguments: an instance of a subtype of \nVolatilitySpec\n, and a vector of returns. The mean specification and error distribution can be changed via the keyword arguments \nmeanspec\n and \ndist\n, which respectively default to \nNoIntercept\n and \nStdNormal\n.\n\n\nFor example, to construct a GARCH(1, 1) model with an intercept and $t$-distributed errors, one would do\n\n\njulia\n spec = GARCH{1, 1}([1., .9, .05]);\n\njulia\n data = BG96;\n\njulia\n am = ARCHModel(spec, data; dist=StdTDist(3.), meanspec=Intercept(1.))\n\nGARCH{1,1} model with Student's t errors, T=1974.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081   \u03bd   \u03bc\nParameters:  1.0 0.9 0.05 3.0 1.0\n\n\n\n\nThe model can then be fitted as follows:\n\n\njulia\n fit!(am)\n\nGARCH{1,1} model with Student's t errors, T=1974.\n\n\nMean equation parameters:\n\n       Estimate  Std.Error  z value Pr(\n|z|)\n\u03bc    0.00227251 0.00686802 0.330882   0.7407\n\nVolatility parameters:\n\n       Estimate  Std.Error z value Pr(\n|z|)\n\u03c9    0.00232225 0.00163909 1.41679   0.1565\n\u03b2\u2081     0.884488   0.036963  23.929   \n1e-99\n\u03b1\u2081     0.124866  0.0405471 3.07952   0.0021\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     4.11211  0.400384 10.2704   \n1e-24\n\n\n\n\nIt should, however, rarely be necessary to construct an \nARCHModel\n manually via its constructor; typically, instances of it are created by calling \nfit\n, \nselectmodel\n, or \nsimulate\n.", 
            "title": "Introduction and type hierarchy"
        }, 
        {
            "location": "/types/#volatility-specifications", 
            "text": "Volatility specifications describe the evolution of $\\sigma_t$. They are modelled as subtypes of  VolatilitySpec . There is one type for each class of (G)ARCH model, parameterized by numbers of lags.", 
            "title": "Volatility specifications"
        }, 
        {
            "location": "/types/#garch", 
            "text": "The GARCH(p, q) model, due to  Bollerslev (J. Econometrics 1986)  specifies the volatility as   \n\\sigma_t^2=\\omega+\\sum_{i=1}^p\\beta_i \\sigma_{t-i}^2+\\sum_{i=1}^q\\alpha_i r_{t-i}^2, \\quad \\omega, \\alpha_i, \\beta_i>0,\\quad \\sum_{i=1}^{\\max p,q} \\alpha_i+\\beta_i<1.   The corresponding type is  GARCH{p, q} . For example, a GARCH(1, 1) model with $\u03c9=1$, $\u03b2=.9$, and $\u03b1=.05$ is obtained with  julia  using ARCH\n\njulia  GARCH{1, 1}([1., .9, .05])\nGARCH{1,1} specification.\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05  As for all subtypes of  VolatilitySpec , the order of the parameters in the coefficient vector is such that all parameters pertaining to the first type parameter  p  (corresponding to the first sum in the equation) appear before those pertaining to the second,  q .  As a special case, the ARCH(q) volatility specification, due to  Engle (Econometrica 1982) , is   \n\\sigma_t^2=\\omega+\\sum_{i=1}^q\\alpha_i r_{t-i}^2,   corresponding to a GARCH{0, q} model. It is available as  _ARCH{q} :  julia  _ARCH{2}([1., .5, .4])\nGARCH{0,2} specification.\n\n               \u03c9  \u03b1\u2081  \u03b1\u2082\nParameters:  1.0 0.5 0.4", 
            "title": "GARCH"
        }, 
        {
            "location": "/types/#egarch", 
            "text": "The EGARCH{o, p, q} volatility specification, due to  Nelson (Econometrica 1991) , is   \n\\log(\\sigma_t^2)=\\omega+\\sum_{i=1}^o\\gamma_i z_{t-i}+\\sum_{i=1}^p\\beta_i \\log(\\sigma_{t-i}^2)+\\sum_{i=1}^q\\alpha_i (|z_{t-i}|-\\sqrt{2/\\pi}), \\quad z_t=r_t/\\sigma_t,\\quad \\sum_{i=1}^{p}\\beta_i<1.   The corresponding type is  EGARCH{o, p, q} :  julia  EGARCH{1, 1, 1}([-0.1, .1, .9, .04])\nEGARCH{1,1,1} specification.\n\n                \u03c9  \u03b3\u2081  \u03b2\u2081   \u03b1\u2081\nParameters:  -0.1 0.1 0.9 0.04", 
            "title": "EGARCH"
        }, 
        {
            "location": "/types/#mean-specifications", 
            "text": "Mean specifications serve to specify $\\mu_t$. They are modelled as subtypes of  MeanSpec . They contain their parameters as (possibly empty) vectors, but convenience constructors are provided where appropriate. Currently, two specifications are available:   $\\mu_t=0$, available as  NoIntercept :   julia  NoIntercept() # convenience constructor, eltype defaults to Float64\nNoIntercept{Float64}(Float64[])   $\\mu_t=\\mu$, available as  Intercept :   julia  Intercept(3) # convenience constructor\nIntercept{Float64}([3.0])", 
            "title": "Mean specifications"
        }, 
        {
            "location": "/types/#distributions", 
            "text": "Different distributions of $z_t$ are available as subtypes of  StandardizedDistribution .  StandardizedDistribution  in turn subtypes  Distribution{Univariate, Continuous}  from  Distributions.jl , though not the entire interface must necessarily be implemented.  StandardizedDistribution s again hold their parameters as vectors, but convenience constructors are provided. The following are currently available:   StdNormal , the standard normal distribution:   julia  StdNormal() # convenience constructor\nStdNormal{Float64}(coefs=Float64[])   StdTDist , the standardized Student's  t  distribution:   julia  StdTDist(3) # convenience constructor: 3 degrees of freedom\nStdTDist{Float64}(coefs=[3.0])", 
            "title": "Distributions"
        }, 
        {
            "location": "/types/#working-with-an-archmodel", 
            "text": "The constructor for  ARCHModel  takes two mandatory arguments: an instance of a subtype of  VolatilitySpec , and a vector of returns. The mean specification and error distribution can be changed via the keyword arguments  meanspec  and  dist , which respectively default to  NoIntercept  and  StdNormal .  For example, to construct a GARCH(1, 1) model with an intercept and $t$-distributed errors, one would do  julia  spec = GARCH{1, 1}([1., .9, .05]);\n\njulia  data = BG96;\n\njulia  am = ARCHModel(spec, data; dist=StdTDist(3.), meanspec=Intercept(1.))\n\nGARCH{1,1} model with Student's t errors, T=1974.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081   \u03bd   \u03bc\nParameters:  1.0 0.9 0.05 3.0 1.0  The model can then be fitted as follows:  julia  fit!(am)\n\nGARCH{1,1} model with Student's t errors, T=1974.\n\n\nMean equation parameters:\n\n       Estimate  Std.Error  z value Pr( |z|)\n\u03bc    0.00227251 0.00686802 0.330882   0.7407\n\nVolatility parameters:\n\n       Estimate  Std.Error z value Pr( |z|)\n\u03c9    0.00232225 0.00163909 1.41679   0.1565\n\u03b2\u2081     0.884488   0.036963  23.929    1e-99\n\u03b1\u2081     0.124866  0.0405471 3.07952   0.0021\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03bd     4.11211  0.400384 10.2704    1e-24  It should, however, rarely be necessary to construct an  ARCHModel  manually via its constructor; typically, instances of it are created by calling  fit ,  selectmodel , or  simulate .", 
            "title": "Working with an ARCHModel"
        }, 
        {
            "location": "/manual/", 
            "text": "We will be using the data from \nBollerslev and Ghysels (JBES 1996)\n, available as the constant \nBG96\n. The data consist of daily German mark/British pound exchange rates (1974 observations) and are often used in evaluating implementations of (G)ARCH models (see, e.g., \nBrooks et.al. (Int. J. Forecasting 2001)\n. We begin by convincing ourselves that the data exhibit ARCH effects; a quick and dirty way of doing this is to look at the sample autocorrelation function of the squared returns:\n\n\njulia\n using ARCH\n\njulia\n data = BG96;\n\njulia\n autocor(data.^2, 1:10, demean=true) # re-exported from StatsBase\n10-element Array{Float64,1}:\n 0.22294073831639766\n 0.17663183540117078\n 0.14086005904595456\n 0.1263198344036979\n 0.18922204038617135\n 0.09068404029331875\n 0.08465365332525085\n 0.09671690899919724\n 0.09217329577285414\n 0.11984168975215709\n\n\n\n\nUsing a critical value of $1.96/\\sqrt{1974}=0.044$, we see that there is indeed significant autocorrelation in the squared series.\n\n\nIt should rarely be necessary to call the constructor directly; typically, instances of \nARCHModel\n are created by calling \nsimulate\n or \nfit\n.\n\n\n\n\nModel selection", 
            "title": "Usage"
        }, 
        {
            "location": "/manual/#model-selection", 
            "text": "", 
            "title": "Model selection"
        }, 
        {
            "location": "/reference/", 
            "text": "Index\n\n\n\n\nARCH.BG96\n\n\nARCH.ARCHModel\n\n\nARCH.ARCHModel\n\n\nARCH.EGARCH\n\n\nARCH.EGARCH\n\n\nARCH.GARCH\n\n\nARCH.GARCH\n\n\nARCH.Intercept\n\n\nARCH.Intercept\n\n\nARCH.MeanSpec\n\n\nARCH.NoIntercept\n\n\nARCH.NoIntercept\n\n\nARCH.StandardizedDistribution\n\n\nARCH.StdNormal\n\n\nARCH.StdNormal\n\n\nARCH.StdTDist\n\n\nARCH.StdTDist\n\n\nARCH.VolatilitySpec\n\n\nARCH._ARCH\n\n\nARCH.selectmodel\n\n\nARCH.simulate\n\n\nARCH.simulate!\n\n\nStatsBase.fit\n\n\nStatsBase.fit\n\n\nStatsBase.fit\n\n\nStatsBase.fit!\n\n\n\n\n\n\nPublic API\n\n\n#\n\n\nARCH.BG96\n \n \nConstant\n.\n\n\nBG96\n\n\n\n\nData from \nBollerslev and Ghysels (JBES 1996)\n.\n\n\nsource\n\n\n#\n\n\nARCH.ARCHModel\n \n \nType\n.\n\n\nARCHModel{T\n:AbstractFloat,\n          VS\n:VolatilitySpec,\n          SD\n:StandardizedDistribution{T},\n          MS\n:MeanSpec{T}\n          } \n: StatisticalModel\n\n\n\n\nsource\n\n\n#\n\n\nARCH.ARCHModel\n \n \nMethod\n.\n\n\nARCHModel(spec::VolatilitySpec, data::Vector; dist=StdNormal(),\n          meanspec=NoIntercept(), fitted=false\n          )\n\n\n\n\nCreate an ARCHModel.\n\n\nExample:\n\n\njulia\n ARCHModel(GARCH{1, 1}([1., .9, .05]), randn(10))\n\nGARCH{1,1} model with Gaussian errors, T=10.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05\n\n\n\n\nsource\n\n\n#\n\n\nARCH.EGARCH\n \n \nType\n.\n\n\nEGARCH{o, p, q, T\n:AbstractFloat} \n: VolatilitySpec{T}\n\n\n\n\nsource\n\n\n#\n\n\nARCH.EGARCH\n \n \nMethod\n.\n\n\nEGARCH{o, p, q}(coefs) -\n VolatilitySpec\n\n\n\n\nConstruct an EGARCH specification with the given parameters.\n\n\nExample:\n\n\njulia\n EGARCH{1, 1, 1}([-0.1, .1, .9, .04])\nEGARCH{1,1,1} specification.\n\n                \u03c9  \u03b3\u2081  \u03b2\u2081   \u03b1\u2081\nParameters:  -0.1 0.1 0.9 0.04\n\n\n\n\nsource\n\n\n#\n\n\nARCH.GARCH\n \n \nType\n.\n\n\nGARCH{p, q, T\n:AbstractFloat} \n: VolatilitySpec{T}\n\n\n\n\nsource\n\n\n#\n\n\nARCH.GARCH\n \n \nMethod\n.\n\n\nGARCH{p, q}(coefs) -\n VolatilitySpec\n\n\n\n\nConstruct a GARCH specification with the given parameters.\n\n\nExample:\n\n\njulia\n GARCH{2, 1}([1., .3, .4, .05 ])\nGARCH{2,1} specification.\n\n               \u03c9  \u03b2\u2081  \u03b2\u2082   \u03b1\u2081\nParameters:  1.0 0.3 0.4 0.05\n\n\n\n\nsource\n\n\n#\n\n\nARCH.Intercept\n \n \nType\n.\n\n\nIntercept{T} \n: MeanSpec{T}\n\n\n\n\nA mean specification with just an intercept.\n\n\nsource\n\n\n#\n\n\nARCH.Intercept\n \n \nMethod\n.\n\n\nIntercept(mu)\n\n\n\n\nCreate an instance of Intercept. \nmu\n can be passed as a scalar or vector.\n\n\nsource\n\n\n#\n\n\nARCH.MeanSpec\n \n \nType\n.\n\n\nMeanSpec{T}\n\n\n\n\nAbstract supertype that mean specifications inherit from.\n\n\nsource\n\n\n#\n\n\nARCH.NoIntercept\n \n \nType\n.\n\n\nNoIntercept{T} \n: MeanSpec{T}\n\n\n\n\nA mean specification without an intercept (i.e., the mean is zero).\n\n\nsource\n\n\n#\n\n\nARCH.NoIntercept\n \n \nType\n.\n\n\nNoIntercept(T::Type=Float64)\nNoIntercept{T}()\nNoIntercept(v::Vector)\n\n\n\n\nCreate an instance of NoIntercept.\n\n\nsource\n\n\n#\n\n\nARCH.StandardizedDistribution\n \n \nType\n.\n\n\nStandardizedDistribution{T} \n: Distributions.Distribution{Univariate, Continuous}\n\n\n\n\nAbstract supertype that standardized distributions inherit from.\n\n\nsource\n\n\n#\n\n\nARCH.StdNormal\n \n \nType\n.\n\n\nStdNormal{T} \n: StandardizedDistribution{T}\n\n\n\n\nThe standard Normal distribution.\n\n\nsource\n\n\n#\n\n\nARCH.StdNormal\n \n \nType\n.\n\n\nStdNormal(T::Type=Float64)\nStdNormal(v::Vector)\nStdNormal{T}()\n\n\n\n\nConstruct an instance of StdNormal.\n\n\nsource\n\n\n#\n\n\nARCH.StdTDist\n \n \nType\n.\n\n\nStdTDist{T} \n: StandardizedDistribution{T}\n\n\n\n\nThe standardized (mean zero, variance one) Student's t distribution.\n\n\nsource\n\n\n#\n\n\nARCH.StdTDist\n \n \nMethod\n.\n\n\nStdTDist(v)\n\n\n\n\nCreate a standardized t distribution with \nv\n degrees of freedom. `\u03bd`` can be passed as a scalar or vector.\n\n\nsource\n\n\n#\n\n\nARCH.VolatilitySpec\n \n \nType\n.\n\n\nVolatilitySpec{T}\n\n\n\n\nAbstract supertype that volatility specifications inherit from.\n\n\nsource\n\n\n#\n\n\nARCH._ARCH\n \n \nType\n.\n\n\n_ARCH{q, T\n:AbstractFloat} \n: VolatilitySpec{T}\n\n\n\n\nsource\n\n\n#\n\n\nARCH.selectmodel\n \n \nMethod\n.\n\n\nselectmodel(::Type{VS}, data; kwargs...) -\n ARCHModel\n\n\n\n\nFit the volatility specification \nVS\n with varying lag lengths and return that which minimizes the \nBIC\n.\n\n\nKeyword arguments:\n\n\n\n\ndist=StdNormal\n: the error distribution.\n\n\nmeanspec=Intercept\n: the mean specification.\n\n\nmaxlags=3\n: maximum lag length to try in each parameter of \nVS\n.\n\n\ncriterion=bic\n: function that takes an \nARCHModel\n and returns the criterion to minimize.\n\n\nshow_trace=false\n: print \ncriterion\n to screen for each estimated model.\n\n\nalgorithm=BFGS(), autodiff=:forward, kwargs...\n: passed on to the optimizer.\n\n\n\n\nExample\n\n\njulia\n selectmodel(EGARCH, BG96)\n\nEGARCH{1,1,2} model with Gaussian errors, T=1974.\n\n\nMean equation parameters:\n\n        Estimate  Std.Error   z value Pr(\n|z|)\n\u03bc    -0.00900018 0.00943948 -0.953461   0.3404\n\nVolatility parameters:\n\n       Estimate Std.Error   z value Pr(\n|z|)\n\u03c9    -0.0544398 0.0592073 -0.919478   0.3578\n\u03b3\u2081   -0.0243368 0.0270414 -0.899985   0.3681\n\u03b2\u2081     0.960301 0.0388183   24.7384   \n1e-99\n\u03b1\u2081     0.405788  0.067466    6.0147    \n1e-8\n\u03b1\u2082    -0.207357  0.114161  -1.81636   0.0693\n\n\n\n\nsource\n\n\n#\n\n\nARCH.simulate\n \n \nFunction\n.\n\n\nsimulate(am::ARCHModel; warmup=100)\nsimulate(spec::VolatilitySpec{T2}, nobs; warmup=100, dist=StdNormal(), meanspec=NoIntercept())\n\n\n\n\nSimulate an ARCHModel.\n\n\nsource\n\n\n#\n\n\nARCH.simulate!\n \n \nMethod\n.\n\n\nsimulate!(am::ARCHModel; warmup=100)\n\n\n\n\nSimulate an ARCHModel, modifying \nam\n in place.\n\n\nsource\n\n\n#\n\n\nStatsBase.fit!\n \n \nMethod\n.\n\n\nfit!(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)\n\n\n\n\nFit the ARCHModel specified by \nam\n, modifying \nam\n in place. Keyword arguments are passed on to the optimizer.\n\n\nsource\n\n\n#\n\n\nStatsBase.fit\n \n \nMethod\n.\n\n\nfit(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)\n\n\n\n\nFit the ARCHModel specified by \nam\n and return the result in a new instance of ARCHModel. Keyword arguments are passed on to the optimizer.\n\n\nsource\n\n\n#\n\n\nStatsBase.fit\n \n \nMethod\n.\n\n\nfit(VS::Type{\n:VolatilitySpec}, data; dist=StdNormal, meanspec=Intercept,\n    algorithm=BFGS(), autodiff=:forward, kwargs...)\n\n\n\n\nFit the ARCH model specified by \nVS\n to data. Keyword arguments \nalgorithm\n, \nautodiff\n, and \nkwargs\n are passed on to the optimizer.\n\n\nExample: EGARCH{1, 1, 1} model without intercept, Student's t errors.\n\n\njulia\n fit(EGARCH{1, 1, 1}, BG96; meanspec=NoIntercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=1974.\n\n\nVolatility parameters:\n\n       Estimate Std.Error   z value Pr(\n|z|)\n\u03c9    -0.0162014 0.0186806 -0.867286   0.3858\n\u03b3\u2081   -0.0378454  0.018024  -2.09972   0.0358\n\u03b2\u2081     0.977687  0.012558   77.8538   \n1e-99\n\u03b1\u2081     0.255804 0.0625497   4.08961    \n1e-4\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     4.12423   0.40059 10.2954   \n1e-24\n\n\n\n\nsource\n\n\n#\n\n\nStatsBase.fit\n \n \nMethod\n.\n\n\nfit(::Type{SD}, data; algorithm=BFGS(), kwargs...)\n\n\n\n\nFit a standardized distribution to the data, using the MLE. Keyword arguments are passed on to the optimizer.\n\n\nsource", 
            "title": "Reference Manual"
        }, 
        {
            "location": "/reference/#index", 
            "text": "ARCH.BG96  ARCH.ARCHModel  ARCH.ARCHModel  ARCH.EGARCH  ARCH.EGARCH  ARCH.GARCH  ARCH.GARCH  ARCH.Intercept  ARCH.Intercept  ARCH.MeanSpec  ARCH.NoIntercept  ARCH.NoIntercept  ARCH.StandardizedDistribution  ARCH.StdNormal  ARCH.StdNormal  ARCH.StdTDist  ARCH.StdTDist  ARCH.VolatilitySpec  ARCH._ARCH  ARCH.selectmodel  ARCH.simulate  ARCH.simulate!  StatsBase.fit  StatsBase.fit  StatsBase.fit  StatsBase.fit!", 
            "title": "Index"
        }, 
        {
            "location": "/reference/#public-api", 
            "text": "#  ARCH.BG96     Constant .  BG96  Data from  Bollerslev and Ghysels (JBES 1996) .  source  #  ARCH.ARCHModel     Type .  ARCHModel{T :AbstractFloat,\n          VS :VolatilitySpec,\n          SD :StandardizedDistribution{T},\n          MS :MeanSpec{T}\n          }  : StatisticalModel  source  #  ARCH.ARCHModel     Method .  ARCHModel(spec::VolatilitySpec, data::Vector; dist=StdNormal(),\n          meanspec=NoIntercept(), fitted=false\n          )  Create an ARCHModel.  Example:  julia  ARCHModel(GARCH{1, 1}([1., .9, .05]), randn(10))\n\nGARCH{1,1} model with Gaussian errors, T=10.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05  source  #  ARCH.EGARCH     Type .  EGARCH{o, p, q, T :AbstractFloat}  : VolatilitySpec{T}  source  #  ARCH.EGARCH     Method .  EGARCH{o, p, q}(coefs) -  VolatilitySpec  Construct an EGARCH specification with the given parameters.  Example:  julia  EGARCH{1, 1, 1}([-0.1, .1, .9, .04])\nEGARCH{1,1,1} specification.\n\n                \u03c9  \u03b3\u2081  \u03b2\u2081   \u03b1\u2081\nParameters:  -0.1 0.1 0.9 0.04  source  #  ARCH.GARCH     Type .  GARCH{p, q, T :AbstractFloat}  : VolatilitySpec{T}  source  #  ARCH.GARCH     Method .  GARCH{p, q}(coefs) -  VolatilitySpec  Construct a GARCH specification with the given parameters.  Example:  julia  GARCH{2, 1}([1., .3, .4, .05 ])\nGARCH{2,1} specification.\n\n               \u03c9  \u03b2\u2081  \u03b2\u2082   \u03b1\u2081\nParameters:  1.0 0.3 0.4 0.05  source  #  ARCH.Intercept     Type .  Intercept{T}  : MeanSpec{T}  A mean specification with just an intercept.  source  #  ARCH.Intercept     Method .  Intercept(mu)  Create an instance of Intercept.  mu  can be passed as a scalar or vector.  source  #  ARCH.MeanSpec     Type .  MeanSpec{T}  Abstract supertype that mean specifications inherit from.  source  #  ARCH.NoIntercept     Type .  NoIntercept{T}  : MeanSpec{T}  A mean specification without an intercept (i.e., the mean is zero).  source  #  ARCH.NoIntercept     Type .  NoIntercept(T::Type=Float64)\nNoIntercept{T}()\nNoIntercept(v::Vector)  Create an instance of NoIntercept.  source  #  ARCH.StandardizedDistribution     Type .  StandardizedDistribution{T}  : Distributions.Distribution{Univariate, Continuous}  Abstract supertype that standardized distributions inherit from.  source  #  ARCH.StdNormal     Type .  StdNormal{T}  : StandardizedDistribution{T}  The standard Normal distribution.  source  #  ARCH.StdNormal     Type .  StdNormal(T::Type=Float64)\nStdNormal(v::Vector)\nStdNormal{T}()  Construct an instance of StdNormal.  source  #  ARCH.StdTDist     Type .  StdTDist{T}  : StandardizedDistribution{T}  The standardized (mean zero, variance one) Student's t distribution.  source  #  ARCH.StdTDist     Method .  StdTDist(v)  Create a standardized t distribution with  v  degrees of freedom. `\u03bd`` can be passed as a scalar or vector.  source  #  ARCH.VolatilitySpec     Type .  VolatilitySpec{T}  Abstract supertype that volatility specifications inherit from.  source  #  ARCH._ARCH     Type .  _ARCH{q, T :AbstractFloat}  : VolatilitySpec{T}  source  #  ARCH.selectmodel     Method .  selectmodel(::Type{VS}, data; kwargs...) -  ARCHModel  Fit the volatility specification  VS  with varying lag lengths and return that which minimizes the  BIC .  Keyword arguments:   dist=StdNormal : the error distribution.  meanspec=Intercept : the mean specification.  maxlags=3 : maximum lag length to try in each parameter of  VS .  criterion=bic : function that takes an  ARCHModel  and returns the criterion to minimize.  show_trace=false : print  criterion  to screen for each estimated model.  algorithm=BFGS(), autodiff=:forward, kwargs... : passed on to the optimizer.   Example  julia  selectmodel(EGARCH, BG96)\n\nEGARCH{1,1,2} model with Gaussian errors, T=1974.\n\n\nMean equation parameters:\n\n        Estimate  Std.Error   z value Pr( |z|)\n\u03bc    -0.00900018 0.00943948 -0.953461   0.3404\n\nVolatility parameters:\n\n       Estimate Std.Error   z value Pr( |z|)\n\u03c9    -0.0544398 0.0592073 -0.919478   0.3578\n\u03b3\u2081   -0.0243368 0.0270414 -0.899985   0.3681\n\u03b2\u2081     0.960301 0.0388183   24.7384    1e-99\n\u03b1\u2081     0.405788  0.067466    6.0147     1e-8\n\u03b1\u2082    -0.207357  0.114161  -1.81636   0.0693  source  #  ARCH.simulate     Function .  simulate(am::ARCHModel; warmup=100)\nsimulate(spec::VolatilitySpec{T2}, nobs; warmup=100, dist=StdNormal(), meanspec=NoIntercept())  Simulate an ARCHModel.  source  #  ARCH.simulate!     Method .  simulate!(am::ARCHModel; warmup=100)  Simulate an ARCHModel, modifying  am  in place.  source  #  StatsBase.fit!     Method .  fit!(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)  Fit the ARCHModel specified by  am , modifying  am  in place. Keyword arguments are passed on to the optimizer.  source  #  StatsBase.fit     Method .  fit(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)  Fit the ARCHModel specified by  am  and return the result in a new instance of ARCHModel. Keyword arguments are passed on to the optimizer.  source  #  StatsBase.fit     Method .  fit(VS::Type{ :VolatilitySpec}, data; dist=StdNormal, meanspec=Intercept,\n    algorithm=BFGS(), autodiff=:forward, kwargs...)  Fit the ARCH model specified by  VS  to data. Keyword arguments  algorithm ,  autodiff , and  kwargs  are passed on to the optimizer.  Example: EGARCH{1, 1, 1} model without intercept, Student's t errors.  julia  fit(EGARCH{1, 1, 1}, BG96; meanspec=NoIntercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=1974.\n\n\nVolatility parameters:\n\n       Estimate Std.Error   z value Pr( |z|)\n\u03c9    -0.0162014 0.0186806 -0.867286   0.3858\n\u03b3\u2081   -0.0378454  0.018024  -2.09972   0.0358\n\u03b2\u2081     0.977687  0.012558   77.8538    1e-99\n\u03b1\u2081     0.255804 0.0625497   4.08961     1e-4\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03bd     4.12423   0.40059 10.2954    1e-24  source  #  StatsBase.fit     Method .  fit(::Type{SD}, data; algorithm=BFGS(), kwargs...)  Fit a standardized distribution to the data, using the MLE. Keyword arguments are passed on to the optimizer.  source", 
            "title": "Public API"
        }
    ]
}