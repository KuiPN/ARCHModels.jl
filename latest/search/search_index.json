{
    "docs": [
        {
            "location": "/", 
            "text": "The ARCH Package\n\n\nARCH (Autoregressive Conditional Heteroskedasticity) models are a class of models designed to capture a feature of financial returns data known as \nvolatility clustering\n, \ni.e.\n, the fact that large (in absolute value) returns tend to cluster together, such as during periods of financial turmoil, which then alternate with relatively calmer periods.\n\n\nThe basic ARCH model was introduced by Engle (1982, Econometrica, pp. 987\u20131008), who in 2003 was awarded a Nobel Memorial Prize in Economic Sciences for its development. Today, the most popular variant is the generalized ARCH, or GARCH, model and its various extensions, due to Bollerslev (1986, Journal of Econometrics, pp. 307 - 327). The basic GARCH(1,1) model for a sample of daily asset returns $\\{r_t\\}_{t\\in{1,\\ldots,T}}$ is\n\n\n\n\n\nr_t=\\sigma_tz_t,\\quad z_t\\sim\\mathrm{N}(0,1),\\quad\n\\sigma_t^2=\\omega+\\alpha r_{t-1}^2+\\beta \\sigma_{t-1}^2,\\quad \\omega, \\alpha, \\beta>0,\\quad \\alpha+\\beta<1.\n\n\n\n\n\nThis can be extended by including additional lags of past squared returns and volatilities: the GARCH(p, q) model  has $q$ of the former and $p$ of the latter. Another generalization is to allow  $z_t$ to follow other, non-Gaussian distributions.\n\n\nThis package implements simulation, estimation, and model selection for the following models:\n\n\n\n\nGARCH(p, q)\n\n\nEGARCH(o, p q)\n\n\n\n\nAs for error distributions, the user may choose among the following:\n\n\n\n\nStandard Normal\n\n\nStandardized Student's $t$\n\n\n\n\n\n\nInstallation\n\n\nThe package is not yet registered. To install it in Julia 1.0 or later, do\n\n\nadd https://github.com/s-broda/ARCH.jl\n\n\n\n\nin the Pkg REPL mode (which is entered by pressing \n]\n at the prompt). For Julia 0.6, check out the 0.6 branch.\n\n\n\n\nContents\n\n\n\n\nQuick Start Guide\n\n\nSimulate a GARCH{1, 1} model\n\n\nFit a GARCH{1, 1} model to the simulated data\n\n\nSimulate and fit an EGARCH model with an intercept, assuming Student's t errors\n\n\nModel selection\n\n\n\n\n\n\nManual\n\n\nType Hierarchy\n\n\n\n\n\n\nReference Manual\n\n\nIndex\n\n\nPublic API\n\n\n\n\n\n\n\n\n\n\nAcknowledgements\n\n\nThis project has received funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation program (grant agreement No. 750559).", 
            "title": "Home"
        }, 
        {
            "location": "/#the-arch-package", 
            "text": "ARCH (Autoregressive Conditional Heteroskedasticity) models are a class of models designed to capture a feature of financial returns data known as  volatility clustering ,  i.e. , the fact that large (in absolute value) returns tend to cluster together, such as during periods of financial turmoil, which then alternate with relatively calmer periods.  The basic ARCH model was introduced by Engle (1982, Econometrica, pp. 987\u20131008), who in 2003 was awarded a Nobel Memorial Prize in Economic Sciences for its development. Today, the most popular variant is the generalized ARCH, or GARCH, model and its various extensions, due to Bollerslev (1986, Journal of Econometrics, pp. 307 - 327). The basic GARCH(1,1) model for a sample of daily asset returns $\\{r_t\\}_{t\\in{1,\\ldots,T}}$ is   \nr_t=\\sigma_tz_t,\\quad z_t\\sim\\mathrm{N}(0,1),\\quad\n\\sigma_t^2=\\omega+\\alpha r_{t-1}^2+\\beta \\sigma_{t-1}^2,\\quad \\omega, \\alpha, \\beta>0,\\quad \\alpha+\\beta<1.   This can be extended by including additional lags of past squared returns and volatilities: the GARCH(p, q) model  has $q$ of the former and $p$ of the latter. Another generalization is to allow  $z_t$ to follow other, non-Gaussian distributions.  This package implements simulation, estimation, and model selection for the following models:   GARCH(p, q)  EGARCH(o, p q)   As for error distributions, the user may choose among the following:   Standard Normal  Standardized Student's $t$", 
            "title": "The ARCH Package"
        }, 
        {
            "location": "/#installation", 
            "text": "The package is not yet registered. To install it in Julia 1.0 or later, do  add https://github.com/s-broda/ARCH.jl  in the Pkg REPL mode (which is entered by pressing  ]  at the prompt). For Julia 0.6, check out the 0.6 branch.", 
            "title": "Installation"
        }, 
        {
            "location": "/#contents", 
            "text": "Quick Start Guide  Simulate a GARCH{1, 1} model  Fit a GARCH{1, 1} model to the simulated data  Simulate and fit an EGARCH model with an intercept, assuming Student's t errors  Model selection    Manual  Type Hierarchy    Reference Manual  Index  Public API", 
            "title": "Contents"
        }, 
        {
            "location": "/#acknowledgements", 
            "text": "This project has received funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation program (grant agreement No. 750559).", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/quickstart/", 
            "text": "Quick Start Guide\n\n\n\n\nSimulate a GARCH{1, 1} model\n\n\njulia\n using ARCH\n\njulia\n am = simulate(GARCH{1, 1}([1., .9, .05]), 10^4)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05\n\n\n\n\nam\n is of type \nARCHModel\n:\n\n\njulia\n typeof(am)\nARCHModel{Float64,GARCH{1,1,Float64},StdNormal{Float64},NoIntercept{Float64}}\n\n\n\n\nNote that by default, the simulated model does not contain an intercept. \nARCHModel\n implements the interface of StatisticalModel from \nStatsBase\n:\n\n\njulia\n nobs(am)\n10000\n\n\n\n\n\n\nFit a GARCH{1, 1} model to the simulated data\n\n\njulia\n fit(GARCH{1, 1}, am.data)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr(\n|z|)\n\u03bc    0.0277078 0.0435526 0.636191   0.5247\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr(\n|z|)\n\u03c9     0.910479   0.146171 6.22886    \n1e-9\n\u03b2\u2081    0.905417  0.0103798  87.229   \n1e-99\n\u03b1\u2081   0.0503472 0.00523329 9.62057   \n1e-21\n\n\n\n\nNote that an intercept is included by default. If no intercept is desired, then the keyword argument \nmeanspec=NoIntercept\n should be passed. Alternatively, use \nfit!\n to modify \nam\n (which does not include an intercept) in-place:\n\n\njulia\n fit!(am)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr(\n|z|)\n\u03c9     0.908648   0.145787 6.23269    \n1e-9\n\u03b2\u2081    0.905532  0.0103563 87.4379   \n1e-99\n\u03b1\u2081   0.0503246 0.00522825 9.62552   \n1e-21\n\n\n\n\n\n\nSimulate and fit an EGARCH model with an intercept, assuming Student's t errors\n\n\njulia\n am = simulate(EGARCH{1, 1, 1}([.1, 0., .9, .1]), 10^4; meanspec=Intercept(1.), dist=StdTDist(3.))\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\n               \u03c9  \u03b3\u2081  \u03b2\u2081  \u03b1\u2081   \u03bd   \u03bc\nParameters:  0.1 0.0 0.9 0.1 3.0 1.0\n\n\n\njulia\n fit!(am)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nMean equation parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bc     1.00043 0.0105728 94.6221   \n1e-99\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr(\n|z|)\n\u03c9     0.0987938 0.0250802  3.93912    \n1e-4\n\u03b3\u2081   0.00367806 0.0107783 0.341247   0.7329\n\u03b2\u2081      0.90718 0.0248733   36.472   \n1e-99\n\u03b1\u2081     0.105632 0.0181307  5.82614    \n1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     2.93074 0.0962429 30.4515   \n1e-99\n\n\n\n\n\n\nModel selection\n\n\nThe function \nselectmodel\n can be used to determine the optimal lag length within a class of models:\n\n\njulia\n selectmodel(EGARCH, am.data; meanspec=Intercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nMean equation parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bc     1.00043 0.0105728 94.6221   \n1e-99\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr(\n|z|)\n\u03c9     0.0987938 0.0250802  3.93912    \n1e-4\n\u03b3\u2081   0.00367806 0.0107783 0.341247   0.7329\n\u03b2\u2081      0.90718 0.0248733   36.472   \n1e-99\n\u03b1\u2081     0.105632 0.0181307  5.82614    \n1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     2.93074 0.0962429 30.4515   \n1e-99\n\n\n\n\nBy default, \nselectmodel\n minimizes the \nBIC\n. In this case, the optimal lag length corresponds to the \"truth\"; viz., the one used to simulate the model.", 
            "title": "Quick Start Guide"
        }, 
        {
            "location": "/quickstart/#quick-start-guide", 
            "text": "", 
            "title": "Quick Start Guide"
        }, 
        {
            "location": "/quickstart/#simulate-a-garch1-1-model", 
            "text": "julia  using ARCH\n\njulia  am = simulate(GARCH{1, 1}([1., .9, .05]), 10^4)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05  am  is of type  ARCHModel :  julia  typeof(am)\nARCHModel{Float64,GARCH{1,1,Float64},StdNormal{Float64},NoIntercept{Float64}}  Note that by default, the simulated model does not contain an intercept.  ARCHModel  implements the interface of StatisticalModel from  StatsBase :  julia  nobs(am)\n10000", 
            "title": "Simulate a GARCH{1, 1} model"
        }, 
        {
            "location": "/quickstart/#fit-a-garch1-1-model-to-the-simulated-data", 
            "text": "julia  fit(GARCH{1, 1}, am.data)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr( |z|)\n\u03bc    0.0277078 0.0435526 0.636191   0.5247\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr( |z|)\n\u03c9     0.910479   0.146171 6.22886     1e-9\n\u03b2\u2081    0.905417  0.0103798  87.229    1e-99\n\u03b1\u2081   0.0503472 0.00523329 9.62057    1e-21  Note that an intercept is included by default. If no intercept is desired, then the keyword argument  meanspec=NoIntercept  should be passed. Alternatively, use  fit!  to modify  am  (which does not include an intercept) in-place:  julia  fit!(am)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr( |z|)\n\u03c9     0.908648   0.145787 6.23269     1e-9\n\u03b2\u2081    0.905532  0.0103563 87.4379    1e-99\n\u03b1\u2081   0.0503246 0.00522825 9.62552    1e-21", 
            "title": "Fit a GARCH{1, 1} model to the simulated data"
        }, 
        {
            "location": "/quickstart/#simulate-and-fit-an-egarch-model-with-an-intercept-assuming-students-t-errors", 
            "text": "julia  am = simulate(EGARCH{1, 1, 1}([.1, 0., .9, .1]), 10^4; meanspec=Intercept(1.), dist=StdTDist(3.))\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\n               \u03c9  \u03b3\u2081  \u03b2\u2081  \u03b1\u2081   \u03bd   \u03bc\nParameters:  0.1 0.0 0.9 0.1 3.0 1.0\n\n\n\njulia  fit!(am)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nMean equation parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03bc     1.00043 0.0105728 94.6221    1e-99\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr( |z|)\n\u03c9     0.0987938 0.0250802  3.93912     1e-4\n\u03b3\u2081   0.00367806 0.0107783 0.341247   0.7329\n\u03b2\u2081      0.90718 0.0248733   36.472    1e-99\n\u03b1\u2081     0.105632 0.0181307  5.82614     1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03bd     2.93074 0.0962429 30.4515    1e-99", 
            "title": "Simulate and fit an EGARCH model with an intercept, assuming Student's t errors"
        }, 
        {
            "location": "/quickstart/#model-selection", 
            "text": "The function  selectmodel  can be used to determine the optimal lag length within a class of models:  julia  selectmodel(EGARCH, am.data; meanspec=Intercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nMean equation parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03bc     1.00043 0.0105728 94.6221    1e-99\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr( |z|)\n\u03c9     0.0987938 0.0250802  3.93912     1e-4\n\u03b3\u2081   0.00367806 0.0107783 0.341247   0.7329\n\u03b2\u2081      0.90718 0.0248733   36.472    1e-99\n\u03b1\u2081     0.105632 0.0181307  5.82614     1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03bd     2.93074 0.0962429 30.4515    1e-99  By default,  selectmodel  minimizes the  BIC . In this case, the optimal lag length corresponds to the \"truth\"; viz., the one used to simulate the model.", 
            "title": "Model selection"
        }, 
        {
            "location": "/manual/", 
            "text": "Manual\n\n\n\n\nType Hierarchy", 
            "title": "Manual"
        }, 
        {
            "location": "/manual/#manual", 
            "text": "", 
            "title": "Manual"
        }, 
        {
            "location": "/manual/#type-hierarchy", 
            "text": "", 
            "title": "Type Hierarchy"
        }, 
        {
            "location": "/reference/", 
            "text": "Reference Manual\n\n\n\n\nIndex\n\n\n\n\nARCH.ARCHModel\n\n\nARCH.EGARCH\n\n\nARCH.GARCH\n\n\nARCH.MeanSpec\n\n\nARCH.StandardizedDistribution\n\n\nARCH.StdNormal\n\n\nARCH.StdTDist\n\n\nARCH.VolatilitySpec\n\n\nARCH._ARCH\n\n\nARCH.selectmodel\n\n\nARCH.simulate\n\n\nARCH.simulate!\n\n\nStatsBase.fit\n\n\nStatsBase.fit!\n\n\n\n\n\n\nPublic API\n\n\n#\n\n\nARCH.ARCHModel\n \n \nType\n.\n\n\nARCHModel{T\n:AbstractFloat,\n          VS\n:VolatilitySpec,\n          SD\n:StandardizedDistribution{T},\n          MS\n:MeanSpec{T}\n          } \n: StatisticalModel\n\n\n\n\nsource\n\n\n#\n\n\nARCH.MeanSpec\n \n \nType\n.\n\n\nMeanSpec{T}\n\n\n\n\nAbstract supertype that mean specifications inherit from.\n\n\nsource\n\n\n#\n\n\nARCH.VolatilitySpec\n \n \nType\n.\n\n\nVolatilitySpec{T}\n\n\n\n\nAbstract supertype that volatility specifications inherit from.\n\n\nsource\n\n\n#\n\n\nARCH._ARCH\n \n \nType\n.\n\n\n_ARCH{q, T\n:AbstractFloat} \n: VolatilitySpec{T}\n\n\n\n\nThe ARCH{q} volatility specification is\n\n\n\n\n\n\\sigma_t^2=\\omega+\\sum_{i=1}^q\\alpha_i r_{t-i}^2.\n\n\n\n\n\nsource\n\n\n#\n\n\nARCH.GARCH\n \n \nType\n.\n\n\nGARCH{p, q, T\n:AbstractFloat} \n: VolatilitySpec{T}\n\n\n\n\nThe GARCH{p, q} volatility specification is\n\n\n\n\n\n\\sigma_t^2=\\omega+\\sum_{i=1}^p\\beta_i \\sigma_{t-i}^2+\\sum_{i=1}^q\\alpha_i r_{t-i}^2.\n\n\n\n\n\nsource\n\n\n#\n\n\nARCH.EGARCH\n \n \nType\n.\n\n\nEGARCH{o, p, q, T\n:AbstractFloat} \n: VolatilitySpec{T}\n\n\n\n\nThe EGARCH{o, p, q} volatility specification is\n\n\n\n\n\n\\log(\\sigma_t^2)=\\omega+\\sum_{i=1}^o\\gamma_i z_{t-i}^2+\\sum_{i=1}^p\\beta_i \\log(\\sigma_{t-i}^2)+\\sum_{i=1}^q\\alpha_i (|z_{t-i}|-\\sqrt{2/\\pi}), \\quad z_t=r_t/\\sigma_t\n\n\n\n\n\nsource\n\n\n#\n\n\nARCH.StandardizedDistribution\n \n \nType\n.\n\n\nStandardizedDistribution{T} \n: Distributions.Distribution{Univariate, Continuous}\n\n\n\n\nAbstract supertype that standardized distributions inherit from.\n\n\nsource\n\n\n#\n\n\nARCH.StdNormal\n \n \nType\n.\n\n\nStdNormal{T} \n: StandardizedDistribution{T}\n\n\n\n\nThe standard Normal distribution.\n\n\nsource\n\n\n#\n\n\nARCH.StdTDist\n \n \nType\n.\n\n\nStdTDist{T} \n: StandardizedDistribution{T}\n\n\n\n\nThe standardized (mean zero, variance one) Student's t distribution.\n\n\nsource\n\n\n#\n\n\nARCH.simulate\n \n \nFunction\n.\n\n\nsimulate(am::ARCHModel; warmup=100)\nsimulate(spec::VolatilitySpec{T2}, nobs; warmup=100, dist=StdNormal(), meanspec=NoIntercept())\n\n\n\n\nSimulate an ARCHModel.\n\n\nsource\n\n\n#\n\n\nARCH.simulate!\n \n \nFunction\n.\n\n\nsimulate!(am::ARCHModel; warmup=100)\n\n\n\n\nSimulate an ARCHModel, modifying \nam\n in place.\n\n\nsource\n\n\n#\n\n\nStatsBase.fit\n \n \nFunction\n.\n\n\nfit(Histogram, data[, weight][, edges]; closed=:right, nbins)\n\n\n\n\nFit a histogram to \ndata\n.\n\n\nArguments\n\n\n\n\ndata\n: either a vector (for a 1-dimensional histogram), or a tuple of vectors of equal length (for an \nn\n-dimensional histogram).\n\n\nweight\n: an optional \nAbstractWeights\n (of the same length as the data vectors), denoting the weight each observation contributes to the bin. If no weight vector is supplied, each observation has weight 1.\n\n\nedges\n: a vector (typically an \nAbstractRange\n object), or tuple of vectors, that gives the edges of the bins along each dimension. If no edges are provided, these are determined from the data.\n\n\n\n\nKeyword arguments\n\n\n\n\nclosed=:right\n: if \n:left\n, the bin intervals are left-closed [a,b); if \n:right\n (the default), intervals are right-closed (a,b].\n\n\nnbins\n: if no \nedges\n argument is supplied, the approximate number of bins to use along each dimension (can be either a single integer, or a tuple of integers).\n\n\n\n\nExamples\n\n\n# Univariate\nh = fit(Histogram, rand(100))\nh = fit(Histogram, rand(100), 0:0.1:1.0)\nh = fit(Histogram, rand(100), nbins=10)\nh = fit(Histogram, rand(100), weights(rand(100)), 0:0.1:1.0)\nh = fit(Histogram, [20], 0:20:100)\nh = fit(Histogram, [20], 0:20:100, closed=:left)\n\n# Multivariate\nh = fit(Histogram, (rand(100),rand(100)))\nh = fit(Histogram, (rand(100),rand(100)),nbins=10)\n\n\n\n\nFit a statistical model.\n\n\nfit(VS::Type{\n:VolatilitySpec}, data; dist=StdNormal, meanspec=Intercept,\n    algorithm=BFGS(), autodiff=:forward, kwargs...)\n\n\n\n\nFit the ARCH model specified by \nVS\n to data. Keyword arguments \nalgorithm\n, \nautodiff\n, and \nkwargs\n are passed on to the optimizer.\n\n\nExamples:\n\n\nGARCH{1, 1} model  with intercept, Gaussian errors\n\n\njulia\n am = simulate(GARCH{1, 1}([1., .9, .05]), 10^4);\n\njulia\n fit(GARCH{1, 1}, am.data)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr(\n|z|)\n\u03bc    0.0277078 0.0435526 0.636191   0.5247\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr(\n|z|)\n\u03c9     0.910479   0.146171 6.22886    \n1e-9\n\u03b2\u2081    0.905417  0.0103798  87.229   \n1e-99\n\u03b1\u2081   0.0503472 0.00523329 9.62057   \n1e-21\n\n\n\n\nEGARCH{1, 1, 1} model without intercept, Student's t errors.\n\n\njulia\n am = simulate(EGARCH{1, 1, 1}([.1, 0., .9, .1]), 10^4; dist=StdTDist(3.));\n\njulia\n fit(EGARCH{1, 1, 1}, am.data; meanspec=NoIntercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr(\n|z|)\n\u03c9     0.0987805 0.0250686  3.94041    \n1e-4\n\u03b3\u2081   0.00365422 0.0107549 0.339773   0.7340\n\u03b2\u2081     0.907199 0.0248543  36.5007   \n1e-99\n\u03b1\u2081     0.105628 0.0181297  5.82623    \n1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     2.93066 0.0961986 30.4647   \n1e-99\n\n\n\n\nsource\n\n\nfit(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)\n\n\n\n\nFit the ARCHModel specified by \nam\n and return the result in a new instance of ARCHModel. Keyword arguments are passed on to the optimizer.\n\n\nsource\n\n\nfit(::Type{SD}, data; algorithm=BFGS(), kwargs...)\n\n\n\n\nFit a standardized distribution to the data, using the MLE. Keyword arguments are passed on to the optimizer.\n\n\nsource\n\n\n#\n\n\nStatsBase.fit!\n \n \nFunction\n.\n\n\nFit a statistical model in-place.\n\n\nfit!(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)\n\n\n\n\nFit the ARCHModel specified by \nam\n, modifying \nam\n in place. Keyword arguments are passed on to the optimizer.\n\n\nsource\n\n\n#\n\n\nARCH.selectmodel\n \n \nFunction\n.\n\n\nselectmodel(::Type{VS}, data; kwargs...) -\n ARCHModel\n\n\n\n\nFit the volatility specification \nVS\n with varying lag lengths and return that which minimizes the \nBIC\n.\n\n\nKeyword arguments:\n\n\n\n\ndist=StdNormal\n: the error distribution.\n\n\nmeanspec=Intercept\n: the mean specification.\n\n\nmaxlags=3\n: maximum lag length to try in each parameter of \nVS\n.\n\n\ncriterion=bic\n: function that takes an \nARCHModel\n and returns the criterion to minimize.\n\n\nshow_trace=false\n: print \ncriterion\n to screen for each estimated model.\n\n\nalgorithm=BFGS(), autodiff=:forward, kwargs...\n: passed on to the optimizer.\n\n\n\n\nExamples:\n\n\njulia\n data = simulate(GARCH{1, 2}([1., .7, .1, .1]), 10^4).data;\n\njulia\n selectmodel(GARCH, data; maxlags=2, show_trace=true)\nGARCH{1,1} model has BIC 50460.8.\nGARCH{1,2} model has BIC 50424.4.\nGARCH{2,2} model has BIC 50432.2.\nGARCH{2,1} model has BIC 50474.4.\n\nGARCH{1,2} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr(\n|z|)\n\u03bc    0.0244617 0.0270085 0.905705   0.3651\n\nVolatility parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03c9    0.923224 0.0945196 9.76755   \n1e-21\n\u03b2\u2081   0.712557 0.0191164 37.2746   \n1e-99\n\u03b1\u2081    0.08817 0.0116818 7.54761   \n1e-13\n\u03b1\u2082    0.11182 0.0164452 6.79955   \n1e-10\n\njulia\n selectmodel(EGARCH{0, p, q} where {p, q}, data; maxlags=2, criterion=aic, show_trace=true) # symmetric EGARCH\nEGARCH{0,1,1} model has AIC 50482.4.\nEGARCH{0,1,2} model has AIC 50445.4.\nEGARCH{0,2,1} model has AIC 50990.9.\nEGARCH{0,2,2} model has AIC 50585.6.\n\nEGARCH{0,1,2} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr(\n|z|)\n\u03bc    0.0229086 0.0263989 0.867786   0.3855\n\nVolatility parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03c9    0.204397 0.0203417 10.0482   \n1e-23\n\u03b2\u2081   0.907583 0.0090583 100.194   \n1e-99\n\u03b1\u2081   0.196247 0.0216006 9.08526   \n1e-18\n\u03b1\u2082    0.15037  0.023943 6.28036    \n1e-9\n\n\n\n\nsource", 
            "title": "Index"
        }, 
        {
            "location": "/reference/#reference-manual", 
            "text": "", 
            "title": "Reference Manual"
        }, 
        {
            "location": "/reference/#index", 
            "text": "ARCH.ARCHModel  ARCH.EGARCH  ARCH.GARCH  ARCH.MeanSpec  ARCH.StandardizedDistribution  ARCH.StdNormal  ARCH.StdTDist  ARCH.VolatilitySpec  ARCH._ARCH  ARCH.selectmodel  ARCH.simulate  ARCH.simulate!  StatsBase.fit  StatsBase.fit!", 
            "title": "Index"
        }, 
        {
            "location": "/reference/#public-api", 
            "text": "#  ARCH.ARCHModel     Type .  ARCHModel{T :AbstractFloat,\n          VS :VolatilitySpec,\n          SD :StandardizedDistribution{T},\n          MS :MeanSpec{T}\n          }  : StatisticalModel  source  #  ARCH.MeanSpec     Type .  MeanSpec{T}  Abstract supertype that mean specifications inherit from.  source  #  ARCH.VolatilitySpec     Type .  VolatilitySpec{T}  Abstract supertype that volatility specifications inherit from.  source  #  ARCH._ARCH     Type .  _ARCH{q, T :AbstractFloat}  : VolatilitySpec{T}  The ARCH{q} volatility specification is   \n\\sigma_t^2=\\omega+\\sum_{i=1}^q\\alpha_i r_{t-i}^2.   source  #  ARCH.GARCH     Type .  GARCH{p, q, T :AbstractFloat}  : VolatilitySpec{T}  The GARCH{p, q} volatility specification is   \n\\sigma_t^2=\\omega+\\sum_{i=1}^p\\beta_i \\sigma_{t-i}^2+\\sum_{i=1}^q\\alpha_i r_{t-i}^2.   source  #  ARCH.EGARCH     Type .  EGARCH{o, p, q, T :AbstractFloat}  : VolatilitySpec{T}  The EGARCH{o, p, q} volatility specification is   \n\\log(\\sigma_t^2)=\\omega+\\sum_{i=1}^o\\gamma_i z_{t-i}^2+\\sum_{i=1}^p\\beta_i \\log(\\sigma_{t-i}^2)+\\sum_{i=1}^q\\alpha_i (|z_{t-i}|-\\sqrt{2/\\pi}), \\quad z_t=r_t/\\sigma_t   source  #  ARCH.StandardizedDistribution     Type .  StandardizedDistribution{T}  : Distributions.Distribution{Univariate, Continuous}  Abstract supertype that standardized distributions inherit from.  source  #  ARCH.StdNormal     Type .  StdNormal{T}  : StandardizedDistribution{T}  The standard Normal distribution.  source  #  ARCH.StdTDist     Type .  StdTDist{T}  : StandardizedDistribution{T}  The standardized (mean zero, variance one) Student's t distribution.  source  #  ARCH.simulate     Function .  simulate(am::ARCHModel; warmup=100)\nsimulate(spec::VolatilitySpec{T2}, nobs; warmup=100, dist=StdNormal(), meanspec=NoIntercept())  Simulate an ARCHModel.  source  #  ARCH.simulate!     Function .  simulate!(am::ARCHModel; warmup=100)  Simulate an ARCHModel, modifying  am  in place.  source  #  StatsBase.fit     Function .  fit(Histogram, data[, weight][, edges]; closed=:right, nbins)  Fit a histogram to  data .  Arguments   data : either a vector (for a 1-dimensional histogram), or a tuple of vectors of equal length (for an  n -dimensional histogram).  weight : an optional  AbstractWeights  (of the same length as the data vectors), denoting the weight each observation contributes to the bin. If no weight vector is supplied, each observation has weight 1.  edges : a vector (typically an  AbstractRange  object), or tuple of vectors, that gives the edges of the bins along each dimension. If no edges are provided, these are determined from the data.   Keyword arguments   closed=:right : if  :left , the bin intervals are left-closed [a,b); if  :right  (the default), intervals are right-closed (a,b].  nbins : if no  edges  argument is supplied, the approximate number of bins to use along each dimension (can be either a single integer, or a tuple of integers).   Examples  # Univariate\nh = fit(Histogram, rand(100))\nh = fit(Histogram, rand(100), 0:0.1:1.0)\nh = fit(Histogram, rand(100), nbins=10)\nh = fit(Histogram, rand(100), weights(rand(100)), 0:0.1:1.0)\nh = fit(Histogram, [20], 0:20:100)\nh = fit(Histogram, [20], 0:20:100, closed=:left)\n\n# Multivariate\nh = fit(Histogram, (rand(100),rand(100)))\nh = fit(Histogram, (rand(100),rand(100)),nbins=10)  Fit a statistical model.  fit(VS::Type{ :VolatilitySpec}, data; dist=StdNormal, meanspec=Intercept,\n    algorithm=BFGS(), autodiff=:forward, kwargs...)  Fit the ARCH model specified by  VS  to data. Keyword arguments  algorithm ,  autodiff , and  kwargs  are passed on to the optimizer.  Examples:  GARCH{1, 1} model  with intercept, Gaussian errors  julia  am = simulate(GARCH{1, 1}([1., .9, .05]), 10^4);\n\njulia  fit(GARCH{1, 1}, am.data)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr( |z|)\n\u03bc    0.0277078 0.0435526 0.636191   0.5247\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr( |z|)\n\u03c9     0.910479   0.146171 6.22886     1e-9\n\u03b2\u2081    0.905417  0.0103798  87.229    1e-99\n\u03b1\u2081   0.0503472 0.00523329 9.62057    1e-21  EGARCH{1, 1, 1} model without intercept, Student's t errors.  julia  am = simulate(EGARCH{1, 1, 1}([.1, 0., .9, .1]), 10^4; dist=StdTDist(3.));\n\njulia  fit(EGARCH{1, 1, 1}, am.data; meanspec=NoIntercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr( |z|)\n\u03c9     0.0987805 0.0250686  3.94041     1e-4\n\u03b3\u2081   0.00365422 0.0107549 0.339773   0.7340\n\u03b2\u2081     0.907199 0.0248543  36.5007    1e-99\n\u03b1\u2081     0.105628 0.0181297  5.82623     1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03bd     2.93066 0.0961986 30.4647    1e-99  source  fit(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)  Fit the ARCHModel specified by  am  and return the result in a new instance of ARCHModel. Keyword arguments are passed on to the optimizer.  source  fit(::Type{SD}, data; algorithm=BFGS(), kwargs...)  Fit a standardized distribution to the data, using the MLE. Keyword arguments are passed on to the optimizer.  source  #  StatsBase.fit!     Function .  Fit a statistical model in-place.  fit!(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)  Fit the ARCHModel specified by  am , modifying  am  in place. Keyword arguments are passed on to the optimizer.  source  #  ARCH.selectmodel     Function .  selectmodel(::Type{VS}, data; kwargs...) -  ARCHModel  Fit the volatility specification  VS  with varying lag lengths and return that which minimizes the  BIC .  Keyword arguments:   dist=StdNormal : the error distribution.  meanspec=Intercept : the mean specification.  maxlags=3 : maximum lag length to try in each parameter of  VS .  criterion=bic : function that takes an  ARCHModel  and returns the criterion to minimize.  show_trace=false : print  criterion  to screen for each estimated model.  algorithm=BFGS(), autodiff=:forward, kwargs... : passed on to the optimizer.   Examples:  julia  data = simulate(GARCH{1, 2}([1., .7, .1, .1]), 10^4).data;\n\njulia  selectmodel(GARCH, data; maxlags=2, show_trace=true)\nGARCH{1,1} model has BIC 50460.8.\nGARCH{1,2} model has BIC 50424.4.\nGARCH{2,2} model has BIC 50432.2.\nGARCH{2,1} model has BIC 50474.4.\n\nGARCH{1,2} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr( |z|)\n\u03bc    0.0244617 0.0270085 0.905705   0.3651\n\nVolatility parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03c9    0.923224 0.0945196 9.76755    1e-21\n\u03b2\u2081   0.712557 0.0191164 37.2746    1e-99\n\u03b1\u2081    0.08817 0.0116818 7.54761    1e-13\n\u03b1\u2082    0.11182 0.0164452 6.79955    1e-10\n\njulia  selectmodel(EGARCH{0, p, q} where {p, q}, data; maxlags=2, criterion=aic, show_trace=true) # symmetric EGARCH\nEGARCH{0,1,1} model has AIC 50482.4.\nEGARCH{0,1,2} model has AIC 50445.4.\nEGARCH{0,2,1} model has AIC 50990.9.\nEGARCH{0,2,2} model has AIC 50585.6.\n\nEGARCH{0,1,2} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr( |z|)\n\u03bc    0.0229086 0.0263989 0.867786   0.3855\n\nVolatility parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03c9    0.204397 0.0203417 10.0482    1e-23\n\u03b2\u2081   0.907583 0.0090583 100.194    1e-99\n\u03b1\u2081   0.196247 0.0216006 9.08526    1e-18\n\u03b1\u2082    0.15037  0.023943 6.28036     1e-9  source", 
            "title": "Public API"
        }
    ]
}