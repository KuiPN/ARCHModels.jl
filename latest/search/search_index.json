{
    "docs": [
        {
            "location": "/", 
            "text": "The ARCH Package\n\n\nARCH (Autoregressive Conditional Heteroskedasticity) models are a class of models designed to capture a feature of financial returns data known as \nvolatility clustering\n, \ni.e.\n, the fact that large (in absolute value) returns tend to cluster together, such as during periods of financial turmoil, which then alternate with relatively calmer periods.\n\n\nThe basic ARCH model was introduced by Engle (1982, Econometrica, pp. 987\u20131008), who in 2003 was awarded a Nobel Memorial Prize in Economic Sciences for its development. Today, the most popular variant is the generalized ARCH, or GARCH, model and its various extensions, due to Bollerslev (1986, Journal of Econometrics, pp. 307 - 327). The basic GARCH(1,1) model for a sample of daily asset returns $\\{r_t\\}_{t\\in{1,\\ldots,T}}$ is\n\n\n\n\n\nr_t=\\sigma_tz_t,\\quad z_t\\sim\\mathrm{N}(0,1),\\quad\n\\sigma_t^2=\\omega+\\alpha r_{t-1}^2+\\beta \\sigma_{t-1}^2,\\quad \\omega, \\alpha, \\beta>0,\\quad \\alpha+\\beta<1.\n\n\n\n\n\nThis can be extended by including additional lags of past squared returns and volatilities: the GARCH(p, q) model  has $q$ of the former and $p$ of the latter. Another generalization is to allow  $z_t$ to follow other, non-Gaussian distributions.\n\n\nThis package implements simulation, estimation, and model selection for the following models:\n\n\n\n\nGARCH(p, q)\n\n\nEGARCH(o, p q)\n\n\n\n\nAs for error distributions, the user may choose among the following:\n\n\n\n\nStandard Normal\n\n\nStandardized Student's $t$\n\n\n\n\n\n\nInstallation\n\n\nThe package is not yet registered. To install it in Julia 1.0 or later, do\n\n\nadd https://github.com/s-broda/ARCH.jl\n\n\n\n\nin the Pkg REPL mode (which is entered by pressing \n]\n at the prompt). For Julia 0.6, check out the 0.6 branch.\n\n\n\n\nContents\n\n\n\n\nVolatility specifications\n\n\nGARCH\n\n\nEGARCH\n\n\n\n\n\n\nMean specifications\n\n\nDistributions\n\n\nIndex\n\n\nPublic API\n\n\n\n\n\n\nAcknowledgements\n\n\nThis project has received funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation program (grant agreement No. 750559).", 
            "title": "Home"
        }, 
        {
            "location": "/#the-arch-package", 
            "text": "ARCH (Autoregressive Conditional Heteroskedasticity) models are a class of models designed to capture a feature of financial returns data known as  volatility clustering ,  i.e. , the fact that large (in absolute value) returns tend to cluster together, such as during periods of financial turmoil, which then alternate with relatively calmer periods.  The basic ARCH model was introduced by Engle (1982, Econometrica, pp. 987\u20131008), who in 2003 was awarded a Nobel Memorial Prize in Economic Sciences for its development. Today, the most popular variant is the generalized ARCH, or GARCH, model and its various extensions, due to Bollerslev (1986, Journal of Econometrics, pp. 307 - 327). The basic GARCH(1,1) model for a sample of daily asset returns $\\{r_t\\}_{t\\in{1,\\ldots,T}}$ is   \nr_t=\\sigma_tz_t,\\quad z_t\\sim\\mathrm{N}(0,1),\\quad\n\\sigma_t^2=\\omega+\\alpha r_{t-1}^2+\\beta \\sigma_{t-1}^2,\\quad \\omega, \\alpha, \\beta>0,\\quad \\alpha+\\beta<1.   This can be extended by including additional lags of past squared returns and volatilities: the GARCH(p, q) model  has $q$ of the former and $p$ of the latter. Another generalization is to allow  $z_t$ to follow other, non-Gaussian distributions.  This package implements simulation, estimation, and model selection for the following models:   GARCH(p, q)  EGARCH(o, p q)   As for error distributions, the user may choose among the following:   Standard Normal  Standardized Student's $t$", 
            "title": "The ARCH Package"
        }, 
        {
            "location": "/#installation", 
            "text": "The package is not yet registered. To install it in Julia 1.0 or later, do  add https://github.com/s-broda/ARCH.jl  in the Pkg REPL mode (which is entered by pressing  ]  at the prompt). For Julia 0.6, check out the 0.6 branch.", 
            "title": "Installation"
        }, 
        {
            "location": "/#contents", 
            "text": "Volatility specifications  GARCH  EGARCH    Mean specifications  Distributions  Index  Public API", 
            "title": "Contents"
        }, 
        {
            "location": "/#acknowledgements", 
            "text": "This project has received funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation program (grant agreement No. 750559).", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/quickstart/", 
            "text": "Simulate a GARCH{1, 1} model\n\n\njulia\n using ARCH\n\njulia\n am = simulate(GARCH{1, 1}([1., .9, .05]), 10^4)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05\n\n\n\n\nam\n is of type \nARCHModel\n:\n\n\njulia\n typeof(am)\nARCHModel{Float64,GARCH{1,1,Float64},StdNormal{Float64},NoIntercept{Float64}}\n\n\n\n\nNote that by default, the simulated model does not contain an intercept. \nARCHModel\n implements the interface of StatisticalModel from \nStatsBase\n:\n\n\njulia\n nobs(am)\n10000\n\n\n\n\nFit a GARCH{1, 1} model to the simulated data\n\n\njulia\n fit(GARCH{1, 1}, am.data)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr(\n|z|)\n\u03bc    0.0277078 0.0435526 0.636191   0.5247\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr(\n|z|)\n\u03c9     0.910479   0.146171 6.22886    \n1e-9\n\u03b2\u2081    0.905417  0.0103798  87.229   \n1e-99\n\u03b1\u2081   0.0503472 0.00523329 9.62057   \n1e-21\n\n\n\n\nNote that an intercept is included by default. If no intercept is desired, then the keyword argument \nmeanspec=NoIntercept\n should be passed. Alternatively, use \nfit!\n to modify \nam\n (which does not include an intercept) in-place:\n\n\njulia\n fit!(am)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr(\n|z|)\n\u03c9     0.908648   0.145787 6.23269    \n1e-9\n\u03b2\u2081    0.905532  0.0103563 87.4379   \n1e-99\n\u03b1\u2081   0.0503246 0.00522825 9.62552   \n1e-21\n\n\n\n\nSimulate and fit an EGARCH model with an intercept, assuming Student's t errors\n\n\njulia\n am = simulate(EGARCH{1, 1, 1}([.1, 0., .9, .1]), 10^4; meanspec=Intercept(1.), dist=StdTDist(3.))\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\n               \u03c9  \u03b3\u2081  \u03b2\u2081  \u03b1\u2081   \u03bd   \u03bc\nParameters:  0.1 0.0 0.9 0.1 3.0 1.0\n\n\n\njulia\n fit!(am)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nMean equation parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bc     1.00043 0.0105728 94.6221   \n1e-99\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr(\n|z|)\n\u03c9     0.0987938 0.0250802  3.93912    \n1e-4\n\u03b3\u2081   0.00367806 0.0107783 0.341247   0.7329\n\u03b2\u2081      0.90718 0.0248733   36.472   \n1e-99\n\u03b1\u2081     0.105632 0.0181307  5.82614    \n1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     2.93074 0.0962429 30.4515   \n1e-99\n\n\n\n\nModel selection\n\n\nThe function \nselectmodel\n can be used to determine the optimal lag length within a class of models:\n\n\njulia\n selectmodel(EGARCH, am.data; meanspec=Intercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nMean equation parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bc     1.00043 0.0105728 94.6221   \n1e-99\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr(\n|z|)\n\u03c9     0.0987938 0.0250802  3.93912    \n1e-4\n\u03b3\u2081   0.00367806 0.0107783 0.341247   0.7329\n\u03b2\u2081      0.90718 0.0248733   36.472   \n1e-99\n\u03b1\u2081     0.105632 0.0181307  5.82614    \n1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     2.93074 0.0962429 30.4515   \n1e-99\n\n\n\n\nBy default, \nselectmodel\n minimizes the \nBIC\n. In this case, the optimal lag length corresponds to the \"truth\"; viz., the one used to simulate the model.", 
            "title": "Quick Start Guide"
        }, 
        {
            "location": "/types/", 
            "text": "The basic type provided by this package is \nARCHModel\n. It implements the interface of \nStatisticalModel\n from \nStatsBase\n. An instance of this type contains a vector of data (such as equity returns), and encapsulates information about the \nvolatility specification\n (e.g., \nGARCH\n or \nEGARCH\n), the \nmean specification\n (e.g., whether an intercept is included), and the \nerror distribution\n.\n\n\n\n\nVolatility specifications\n\n\n\n\nGARCH\n\n\n\n\nEGARCH\n\n\n\n\nMean specifications\n\n\n\n\nDistributions", 
            "title": "Introduction and type hierarchy"
        }, 
        {
            "location": "/types/#volatility-specifications", 
            "text": "", 
            "title": "Volatility specifications"
        }, 
        {
            "location": "/types/#garch", 
            "text": "", 
            "title": "GARCH"
        }, 
        {
            "location": "/types/#egarch", 
            "text": "", 
            "title": "EGARCH"
        }, 
        {
            "location": "/types/#mean-specifications", 
            "text": "", 
            "title": "Mean specifications"
        }, 
        {
            "location": "/types/#distributions", 
            "text": "", 
            "title": "Distributions"
        }, 
        {
            "location": "/manual/", 
            "text": "We will be using the data from Bollerslev and Ghysels (1996)\n1\n, available as the constant \nBG96\n. The data consist of daily German mark/British pound exchange rates (1974 observations) and are often used in evaluating implementations of (G)ARCH models\n2\n. An instance of \nARCHModel\n can be created by calling the constructor as follows:\n\n\njulia\n using ARCH\n\njulia\n spec = GARCH{1, 1}([1., .9, .05])\nGARCH{1,1,Float64}([1.0, 0.9, 0.05])\n\njulia\n spec = GARCH{1, 1}([1., .9, .05]);\n\njulia\n data = BG96;\n\njulia\n am = ARCHModel(spec, data)\n\nGARCH{1,1} model with Gaussian errors, T=1000.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05\n\n\n\n\nNotice that no intercept is included by default, and a standard Normal distribution is assumed. The constructor accepts the keyword arguments \ndist\n and \nmeanspec\n for specifying alternative distributions and mean specifications:\n\n\njulia\n am = ARCHModel(spec, data; dist=StdTDist(3.), meanspec=Intercept(1.))\n\nGARCH{1,1} model with Student's t errors, T=1000.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081   \u03bd   \u03bc\nParameters:  1.0 0.9 0.05 3.0 1.0\n\n\n\n\n\nThe model can then be fitted as follows:\n\n\njulia\n fit!(am)\n\nGARCH{1,1} model with Student's t errors, T=1974.\n\n\nMean equation parameters:\n\n       Estimate  Std.Error  z value Pr(\n|z|)\n\u03bc    0.00227251 0.00686802 0.330882   0.7407\n\nVolatility parameters:\n\n       Estimate  Std.Error z value Pr(\n|z|)\n\u03c9    0.00232225 0.00163909 1.41679   0.1565\n\u03b2\u2081     0.884488   0.036963  23.929   \n1e-99\n\u03b1\u2081     0.124866  0.0405471 3.07952   0.0021\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     4.11211  0.400384 10.2704   \n1e-24\n\n\n\n\nIt should rarely be necessary to call the constructor directly; typically, instances of \nARCHModel\n are created by calling \nsimulate\n or \nfit\n.\n\n\n\n\n\n\n\n\n\n\nBollerslev, T. and Ghysels, E. (1996), Periodic Autoregressive Conditional Heteroscedasticity, Journal of Business and Economic Statistics (14), pp. 139-151. \nDOI: 10.2307/1392425\n\n\n\n\n\n\nBrooks, C., Burke, S. P., and Persand, G. (2001), Benchmarks and the accuracy of GARCH model estimation, International Journal of Forecasting (17), pp. 45-56.\nDOI: 10.1016/S0169-2070(00)00070-4", 
            "title": "Usage"
        }, 
        {
            "location": "/reference/", 
            "text": "Index\n\n\n\n\nARCH.BG96\n\n\nARCH.ARCHModel\n\n\nARCH.ARCHModel\n\n\nARCH.EGARCH\n\n\nARCH.EGARCH\n\n\nARCH.GARCH\n\n\nARCH.GARCH\n\n\nARCH.Intercept\n\n\nARCH.Intercept\n\n\nARCH.MeanSpec\n\n\nARCH.NoIntercept\n\n\nARCH.NoIntercept\n\n\nARCH.StandardizedDistribution\n\n\nARCH.StdNormal\n\n\nARCH.StdNormal\n\n\nARCH.StdTDist\n\n\nARCH.StdTDist\n\n\nARCH.VolatilitySpec\n\n\nARCH._ARCH\n\n\nARCH.selectmodel\n\n\nARCH.simulate\n\n\nARCH.simulate!\n\n\nStatsBase.fit\n\n\nStatsBase.fit\n\n\nStatsBase.fit\n\n\nStatsBase.fit!\n\n\n\n\n\n\nPublic API\n\n\n#\n\n\nARCH.BG96\n \n \nConstant\n.\n\n\nBG96\n\n\n\n\nData from  Bollerslev, T. and Ghysels, E. (1996), Periodic Autoregressive Conditional Heteroscedasticity, Journal of Business and Economic Statistics (14), pp. 139-151. \nDOI: 10.2307/1392425\n.\n\n\nsource\n\n\n#\n\n\nARCH.ARCHModel\n \n \nType\n.\n\n\nARCHModel{T\n:AbstractFloat,\n          VS\n:VolatilitySpec,\n          SD\n:StandardizedDistribution{T},\n          MS\n:MeanSpec{T}\n          } \n: StatisticalModel\n\n\n\n\nsource\n\n\n#\n\n\nARCH.ARCHModel\n \n \nMethod\n.\n\n\nARCHModel(spec::VolatilitySpec, data::Vector; dist=StdNormal(),\n          meanspec=NoIntercept(), fitted=false\n          )\n\n\n\n\nCreate an ARCHModel.\n\n\nExample:\n\n\njulia\n ARCHModel(GARCH{1, 1}([1., .9, .05]), randn(10))\n\nGARCH{1,1} model with Gaussian errors, T=10.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05\n\n\n\n\nsource\n\n\n#\n\n\nARCH.EGARCH\n \n \nType\n.\n\n\nEGARCH{o, p, q, T\n:AbstractFloat} \n: VolatilitySpec{T}\n\n\n\n\nThe EGARCH{o, p, q} volatility specification is\n\n\n\n\n\n\\log(\\sigma_t^2)=\\omega+\\sum_{i=1}^o\\gamma_i z_{t-i}^2+\\sum_{i=1}^p\\beta_i \\log(\\sigma_{t-i}^2)+\\sum_{i=1}^q\\alpha_i (|z_{t-i}|-\\sqrt{2/\\pi}), \\quad z_t=r_t/\\sigma_t\n\n\n\n\n\nsource\n\n\n#\n\n\nARCH.EGARCH\n \n \nMethod\n.\n\n\nEGARCH{o, p, q}(coefs) -\n VolatilitySpec\n\n\n\n\nConstruct an EGARCH specification with the given parameters.\n\n\nExample:\n\n\njulia\n spec = EGARCH{1, 1, 1}([-0.1, .1, .9, .04]); coefnames(typeof(spec))\n4-element Array{String,1}:\n \n\u03c9\n\n \n\u03b3\u2081\n\n \n\u03b2\u2081\n\n \n\u03b1\u2081\n\n\n\n\n\nsource\n\n\n#\n\n\nARCH.GARCH\n \n \nType\n.\n\n\nGARCH{p, q, T\n:AbstractFloat} \n: VolatilitySpec{T}\n\n\n\n\nThe GARCH{p, q} volatility specification is\n\n\n\n\n\n\\sigma_t^2=\\omega+\\sum_{i=1}^p\\beta_i \\sigma_{t-i}^2+\\sum_{i=1}^q\\alpha_i r_{t-i}^2.\n\n\n\n\n\nsource\n\n\n#\n\n\nARCH.GARCH\n \n \nMethod\n.\n\n\nGARCH{p, q}(coefs) -\n VolatilitySpec\n\n\n\n\nConstruct a GARCH specification with the given parameters.\n\n\nExample:\n\n\njulia\n spec = GARCH{2, 1}([1., .3, .4, .05 ]); coefnames(typeof(spec))\n4-element Array{String,1}:\n \n\u03c9\n\n \n\u03b2\u2081\n\n \n\u03b2\u2082\n\n \n\u03b1\u2081\n\n\n\n\n\nsource\n\n\n#\n\n\nARCH.Intercept\n \n \nType\n.\n\n\nIntercept{T} \n: MeanSpec{T}\n\n\n\n\nA mean specification with just an intercept.\n\n\nsource\n\n\n#\n\n\nARCH.Intercept\n \n \nMethod\n.\n\n\nIntercept(mu)\n\n\n\n\nCreate an instance of Intercept. \nmu\n can be passed as a scalar or vector.\n\n\nsource\n\n\n#\n\n\nARCH.MeanSpec\n \n \nType\n.\n\n\nMeanSpec{T}\n\n\n\n\nAbstract supertype that mean specifications inherit from.\n\n\nsource\n\n\n#\n\n\nARCH.NoIntercept\n \n \nType\n.\n\n\nNoIntercept{T} \n: MeanSpec{T}\n\n\n\n\nA mean specification without an intercept (i.e., the mean is zero).\n\n\nsource\n\n\n#\n\n\nARCH.NoIntercept\n \n \nType\n.\n\n\nNoIntercept(T::Type=Float64)\nNoIntercept{T}()\nNoIntercept(v::Vector)\n\n\n\n\nCreate an instance of NoIntercept.\n\n\nsource\n\n\n#\n\n\nARCH.StandardizedDistribution\n \n \nType\n.\n\n\nStandardizedDistribution{T} \n: Distributions.Distribution{Univariate, Continuous}\n\n\n\n\nAbstract supertype that standardized distributions inherit from.\n\n\nsource\n\n\n#\n\n\nARCH.StdNormal\n \n \nType\n.\n\n\nStdNormal{T} \n: StandardizedDistribution{T}\n\n\n\n\nThe standard Normal distribution.\n\n\nsource\n\n\n#\n\n\nARCH.StdNormal\n \n \nType\n.\n\n\nStdNormal(T::Type=Float64)\nStdNormal(v::Vector)\nStdNormal{T}()\n\n\n\n\nConstruct an instance of StdNormal.\n\n\nsource\n\n\n#\n\n\nARCH.StdTDist\n \n \nType\n.\n\n\nStdTDist{T} \n: StandardizedDistribution{T}\n\n\n\n\nThe standardized (mean zero, variance one) Student's t distribution.\n\n\nsource\n\n\n#\n\n\nARCH.StdTDist\n \n \nMethod\n.\n\n\nStdTDist(v)\n\n\n\n\nCreate a standardized t distribution with \nv\n degrees of freedom. `\u03bd`` can be passed as a scalar or vector.\n\n\nsource\n\n\n#\n\n\nARCH.VolatilitySpec\n \n \nType\n.\n\n\nVolatilitySpec{T}\n\n\n\n\nAbstract supertype that volatility specifications inherit from.\n\n\nsource\n\n\n#\n\n\nARCH._ARCH\n \n \nType\n.\n\n\n_ARCH{q, T\n:AbstractFloat} \n: VolatilitySpec{T}\n\n\n\n\nThe ARCH{q} volatility specification is\n\n\n\n\n\n\\sigma_t^2=\\omega+\\sum_{i=1}^q\\alpha_i r_{t-i}^2.\n\n\n\n\n\nsource\n\n\n#\n\n\nARCH.selectmodel\n \n \nMethod\n.\n\n\nselectmodel(::Type{VS}, data; kwargs...) -\n ARCHModel\n\n\n\n\nFit the volatility specification \nVS\n with varying lag lengths and return that which minimizes the \nBIC\n.\n\n\nKeyword arguments:\n\n\n\n\ndist=StdNormal\n: the error distribution.\n\n\nmeanspec=Intercept\n: the mean specification.\n\n\nmaxlags=3\n: maximum lag length to try in each parameter of \nVS\n.\n\n\ncriterion=bic\n: function that takes an \nARCHModel\n and returns the criterion to minimize.\n\n\nshow_trace=false\n: print \ncriterion\n to screen for each estimated model.\n\n\nalgorithm=BFGS(), autodiff=:forward, kwargs...\n: passed on to the optimizer.\n\n\n\n\nExamples:\n\n\njulia\n data = simulate(GARCH{1, 2}([1., .7, .1, .1]), 10^4).data;\n\njulia\n selectmodel(GARCH, data; maxlags=2, show_trace=true)\nGARCH{1,1} model has BIC 50460.8.\nGARCH{1,2} model has BIC 50424.4.\nGARCH{2,2} model has BIC 50432.2.\nGARCH{2,1} model has BIC 50474.4.\n\nGARCH{1,2} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr(\n|z|)\n\u03bc    0.0244617 0.0270085 0.905705   0.3651\n\nVolatility parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03c9    0.923224 0.0945196 9.76755   \n1e-21\n\u03b2\u2081   0.712557 0.0191164 37.2746   \n1e-99\n\u03b1\u2081    0.08817 0.0116818 7.54761   \n1e-13\n\u03b1\u2082    0.11182 0.0164452 6.79955   \n1e-10\n\njulia\n selectmodel(EGARCH{0, p, q} where {p, q}, data; maxlags=2, criterion=aic, show_trace=true) # symmetric EGARCH\nEGARCH{0,1,1} model has AIC 50482.4.\nEGARCH{0,1,2} model has AIC 50445.4.\nEGARCH{0,2,1} model has AIC 50990.9.\nEGARCH{0,2,2} model has AIC 50585.6.\n\nEGARCH{0,1,2} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr(\n|z|)\n\u03bc    0.0229086 0.0263989 0.867786   0.3855\n\nVolatility parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03c9    0.204397 0.0203417 10.0482   \n1e-23\n\u03b2\u2081   0.907583 0.0090583 100.194   \n1e-99\n\u03b1\u2081   0.196247 0.0216006 9.08526   \n1e-18\n\u03b1\u2082    0.15037  0.023943 6.28036    \n1e-9\n\n\n\n\nsource\n\n\n#\n\n\nARCH.simulate\n \n \nFunction\n.\n\n\nsimulate(am::ARCHModel; warmup=100)\nsimulate(spec::VolatilitySpec{T2}, nobs; warmup=100, dist=StdNormal(), meanspec=NoIntercept())\n\n\n\n\nSimulate an ARCHModel.\n\n\nsource\n\n\n#\n\n\nARCH.simulate!\n \n \nMethod\n.\n\n\nsimulate!(am::ARCHModel; warmup=100)\n\n\n\n\nSimulate an ARCHModel, modifying \nam\n in place.\n\n\nsource\n\n\n#\n\n\nStatsBase.fit!\n \n \nMethod\n.\n\n\nfit!(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)\n\n\n\n\nFit the ARCHModel specified by \nam\n, modifying \nam\n in place. Keyword arguments are passed on to the optimizer.\n\n\nsource\n\n\n#\n\n\nStatsBase.fit\n \n \nMethod\n.\n\n\nfit(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)\n\n\n\n\nFit the ARCHModel specified by \nam\n and return the result in a new instance of ARCHModel. Keyword arguments are passed on to the optimizer.\n\n\nsource\n\n\n#\n\n\nStatsBase.fit\n \n \nMethod\n.\n\n\nfit(VS::Type{\n:VolatilitySpec}, data; dist=StdNormal, meanspec=Intercept,\n    algorithm=BFGS(), autodiff=:forward, kwargs...)\n\n\n\n\nFit the ARCH model specified by \nVS\n to data. Keyword arguments \nalgorithm\n, \nautodiff\n, and \nkwargs\n are passed on to the optimizer.\n\n\nExamples:\n\n\nGARCH{1, 1} model  with intercept, Gaussian errors\n\n\njulia\n am = simulate(GARCH{1, 1}([1., .9, .05]), 10^4);\n\njulia\n fit(GARCH{1, 1}, am.data)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr(\n|z|)\n\u03bc    0.0277078 0.0435526 0.636191   0.5247\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr(\n|z|)\n\u03c9     0.910479   0.146171 6.22886    \n1e-9\n\u03b2\u2081    0.905417  0.0103798  87.229   \n1e-99\n\u03b1\u2081   0.0503472 0.00523329 9.62057   \n1e-21\n\n\n\n\nEGARCH{1, 1, 1} model without intercept, Student's t errors.\n\n\njulia\n am = simulate(EGARCH{1, 1, 1}([.1, 0., .9, .1]), 10^4; dist=StdTDist(3.));\n\njulia\n fit(EGARCH{1, 1, 1}, am.data; meanspec=NoIntercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr(\n|z|)\n\u03c9     0.0987805 0.0250686  3.94041    \n1e-4\n\u03b3\u2081   0.00365422 0.0107549 0.339773   0.7340\n\u03b2\u2081     0.907199 0.0248543  36.5007   \n1e-99\n\u03b1\u2081     0.105628 0.0181297  5.82623    \n1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr(\n|z|)\n\u03bd     2.93066 0.0961986 30.4647   \n1e-99\n\n\n\n\nsource\n\n\n#\n\n\nStatsBase.fit\n \n \nMethod\n.\n\n\nfit(::Type{SD}, data; algorithm=BFGS(), kwargs...)\n\n\n\n\nFit a standardized distribution to the data, using the MLE. Keyword arguments are passed on to the optimizer.\n\n\nsource", 
            "title": "Reference Manual"
        }, 
        {
            "location": "/reference/#index", 
            "text": "ARCH.BG96  ARCH.ARCHModel  ARCH.ARCHModel  ARCH.EGARCH  ARCH.EGARCH  ARCH.GARCH  ARCH.GARCH  ARCH.Intercept  ARCH.Intercept  ARCH.MeanSpec  ARCH.NoIntercept  ARCH.NoIntercept  ARCH.StandardizedDistribution  ARCH.StdNormal  ARCH.StdNormal  ARCH.StdTDist  ARCH.StdTDist  ARCH.VolatilitySpec  ARCH._ARCH  ARCH.selectmodel  ARCH.simulate  ARCH.simulate!  StatsBase.fit  StatsBase.fit  StatsBase.fit  StatsBase.fit!", 
            "title": "Index"
        }, 
        {
            "location": "/reference/#public-api", 
            "text": "#  ARCH.BG96     Constant .  BG96  Data from  Bollerslev, T. and Ghysels, E. (1996), Periodic Autoregressive Conditional Heteroscedasticity, Journal of Business and Economic Statistics (14), pp. 139-151.  DOI: 10.2307/1392425 .  source  #  ARCH.ARCHModel     Type .  ARCHModel{T :AbstractFloat,\n          VS :VolatilitySpec,\n          SD :StandardizedDistribution{T},\n          MS :MeanSpec{T}\n          }  : StatisticalModel  source  #  ARCH.ARCHModel     Method .  ARCHModel(spec::VolatilitySpec, data::Vector; dist=StdNormal(),\n          meanspec=NoIntercept(), fitted=false\n          )  Create an ARCHModel.  Example:  julia  ARCHModel(GARCH{1, 1}([1., .9, .05]), randn(10))\n\nGARCH{1,1} model with Gaussian errors, T=10.\n\n\n               \u03c9  \u03b2\u2081   \u03b1\u2081\nParameters:  1.0 0.9 0.05  source  #  ARCH.EGARCH     Type .  EGARCH{o, p, q, T :AbstractFloat}  : VolatilitySpec{T}  The EGARCH{o, p, q} volatility specification is   \n\\log(\\sigma_t^2)=\\omega+\\sum_{i=1}^o\\gamma_i z_{t-i}^2+\\sum_{i=1}^p\\beta_i \\log(\\sigma_{t-i}^2)+\\sum_{i=1}^q\\alpha_i (|z_{t-i}|-\\sqrt{2/\\pi}), \\quad z_t=r_t/\\sigma_t   source  #  ARCH.EGARCH     Method .  EGARCH{o, p, q}(coefs) -  VolatilitySpec  Construct an EGARCH specification with the given parameters.  Example:  julia  spec = EGARCH{1, 1, 1}([-0.1, .1, .9, .04]); coefnames(typeof(spec))\n4-element Array{String,1}:\n  \u03c9 \n  \u03b3\u2081 \n  \u03b2\u2081 \n  \u03b1\u2081   source  #  ARCH.GARCH     Type .  GARCH{p, q, T :AbstractFloat}  : VolatilitySpec{T}  The GARCH{p, q} volatility specification is   \n\\sigma_t^2=\\omega+\\sum_{i=1}^p\\beta_i \\sigma_{t-i}^2+\\sum_{i=1}^q\\alpha_i r_{t-i}^2.   source  #  ARCH.GARCH     Method .  GARCH{p, q}(coefs) -  VolatilitySpec  Construct a GARCH specification with the given parameters.  Example:  julia  spec = GARCH{2, 1}([1., .3, .4, .05 ]); coefnames(typeof(spec))\n4-element Array{String,1}:\n  \u03c9 \n  \u03b2\u2081 \n  \u03b2\u2082 \n  \u03b1\u2081   source  #  ARCH.Intercept     Type .  Intercept{T}  : MeanSpec{T}  A mean specification with just an intercept.  source  #  ARCH.Intercept     Method .  Intercept(mu)  Create an instance of Intercept.  mu  can be passed as a scalar or vector.  source  #  ARCH.MeanSpec     Type .  MeanSpec{T}  Abstract supertype that mean specifications inherit from.  source  #  ARCH.NoIntercept     Type .  NoIntercept{T}  : MeanSpec{T}  A mean specification without an intercept (i.e., the mean is zero).  source  #  ARCH.NoIntercept     Type .  NoIntercept(T::Type=Float64)\nNoIntercept{T}()\nNoIntercept(v::Vector)  Create an instance of NoIntercept.  source  #  ARCH.StandardizedDistribution     Type .  StandardizedDistribution{T}  : Distributions.Distribution{Univariate, Continuous}  Abstract supertype that standardized distributions inherit from.  source  #  ARCH.StdNormal     Type .  StdNormal{T}  : StandardizedDistribution{T}  The standard Normal distribution.  source  #  ARCH.StdNormal     Type .  StdNormal(T::Type=Float64)\nStdNormal(v::Vector)\nStdNormal{T}()  Construct an instance of StdNormal.  source  #  ARCH.StdTDist     Type .  StdTDist{T}  : StandardizedDistribution{T}  The standardized (mean zero, variance one) Student's t distribution.  source  #  ARCH.StdTDist     Method .  StdTDist(v)  Create a standardized t distribution with  v  degrees of freedom. `\u03bd`` can be passed as a scalar or vector.  source  #  ARCH.VolatilitySpec     Type .  VolatilitySpec{T}  Abstract supertype that volatility specifications inherit from.  source  #  ARCH._ARCH     Type .  _ARCH{q, T :AbstractFloat}  : VolatilitySpec{T}  The ARCH{q} volatility specification is   \n\\sigma_t^2=\\omega+\\sum_{i=1}^q\\alpha_i r_{t-i}^2.   source  #  ARCH.selectmodel     Method .  selectmodel(::Type{VS}, data; kwargs...) -  ARCHModel  Fit the volatility specification  VS  with varying lag lengths and return that which minimizes the  BIC .  Keyword arguments:   dist=StdNormal : the error distribution.  meanspec=Intercept : the mean specification.  maxlags=3 : maximum lag length to try in each parameter of  VS .  criterion=bic : function that takes an  ARCHModel  and returns the criterion to minimize.  show_trace=false : print  criterion  to screen for each estimated model.  algorithm=BFGS(), autodiff=:forward, kwargs... : passed on to the optimizer.   Examples:  julia  data = simulate(GARCH{1, 2}([1., .7, .1, .1]), 10^4).data;\n\njulia  selectmodel(GARCH, data; maxlags=2, show_trace=true)\nGARCH{1,1} model has BIC 50460.8.\nGARCH{1,2} model has BIC 50424.4.\nGARCH{2,2} model has BIC 50432.2.\nGARCH{2,1} model has BIC 50474.4.\n\nGARCH{1,2} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr( |z|)\n\u03bc    0.0244617 0.0270085 0.905705   0.3651\n\nVolatility parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03c9    0.923224 0.0945196 9.76755    1e-21\n\u03b2\u2081   0.712557 0.0191164 37.2746    1e-99\n\u03b1\u2081    0.08817 0.0116818 7.54761    1e-13\n\u03b1\u2082    0.11182 0.0164452 6.79955    1e-10\n\njulia  selectmodel(EGARCH{0, p, q} where {p, q}, data; maxlags=2, criterion=aic, show_trace=true) # symmetric EGARCH\nEGARCH{0,1,1} model has AIC 50482.4.\nEGARCH{0,1,2} model has AIC 50445.4.\nEGARCH{0,2,1} model has AIC 50990.9.\nEGARCH{0,2,2} model has AIC 50585.6.\n\nEGARCH{0,1,2} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr( |z|)\n\u03bc    0.0229086 0.0263989 0.867786   0.3855\n\nVolatility parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03c9    0.204397 0.0203417 10.0482    1e-23\n\u03b2\u2081   0.907583 0.0090583 100.194    1e-99\n\u03b1\u2081   0.196247 0.0216006 9.08526    1e-18\n\u03b1\u2082    0.15037  0.023943 6.28036     1e-9  source  #  ARCH.simulate     Function .  simulate(am::ARCHModel; warmup=100)\nsimulate(spec::VolatilitySpec{T2}, nobs; warmup=100, dist=StdNormal(), meanspec=NoIntercept())  Simulate an ARCHModel.  source  #  ARCH.simulate!     Method .  simulate!(am::ARCHModel; warmup=100)  Simulate an ARCHModel, modifying  am  in place.  source  #  StatsBase.fit!     Method .  fit!(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)  Fit the ARCHModel specified by  am , modifying  am  in place. Keyword arguments are passed on to the optimizer.  source  #  StatsBase.fit     Method .  fit(am::ARCHModel; algorithm=BFGS(), autodiff=:forward, kwargs...)  Fit the ARCHModel specified by  am  and return the result in a new instance of ARCHModel. Keyword arguments are passed on to the optimizer.  source  #  StatsBase.fit     Method .  fit(VS::Type{ :VolatilitySpec}, data; dist=StdNormal, meanspec=Intercept,\n    algorithm=BFGS(), autodiff=:forward, kwargs...)  Fit the ARCH model specified by  VS  to data. Keyword arguments  algorithm ,  autodiff , and  kwargs  are passed on to the optimizer.  Examples:  GARCH{1, 1} model  with intercept, Gaussian errors  julia  am = simulate(GARCH{1, 1}([1., .9, .05]), 10^4);\n\njulia  fit(GARCH{1, 1}, am.data)\n\nGARCH{1,1} model with Gaussian errors, T=10000.\n\n\nMean equation parameters:\n\n      Estimate Std.Error  z value Pr( |z|)\n\u03bc    0.0277078 0.0435526 0.636191   0.5247\n\nVolatility parameters:\n\n      Estimate  Std.Error z value Pr( |z|)\n\u03c9     0.910479   0.146171 6.22886     1e-9\n\u03b2\u2081    0.905417  0.0103798  87.229    1e-99\n\u03b1\u2081   0.0503472 0.00523329 9.62057    1e-21  EGARCH{1, 1, 1} model without intercept, Student's t errors.  julia  am = simulate(EGARCH{1, 1, 1}([.1, 0., .9, .1]), 10^4; dist=StdTDist(3.));\n\njulia  fit(EGARCH{1, 1, 1}, am.data; meanspec=NoIntercept, dist=StdTDist)\n\nEGARCH{1,1,1} model with Student's t errors, T=10000.\n\n\nVolatility parameters:\n\n       Estimate Std.Error  z value Pr( |z|)\n\u03c9     0.0987805 0.0250686  3.94041     1e-4\n\u03b3\u2081   0.00365422 0.0107549 0.339773   0.7340\n\u03b2\u2081     0.907199 0.0248543  36.5007    1e-99\n\u03b1\u2081     0.105628 0.0181297  5.82623     1e-8\n\nDistribution parameters:\n\n     Estimate Std.Error z value Pr( |z|)\n\u03bd     2.93066 0.0961986 30.4647    1e-99  source  #  StatsBase.fit     Method .  fit(::Type{SD}, data; algorithm=BFGS(), kwargs...)  Fit a standardized distribution to the data, using the MLE. Keyword arguments are passed on to the optimizer.  source", 
            "title": "Public API"
        }
    ]
}